/* The following code was generated by JFlex 1.4.3 on 4/26/12 12:59 PM */

package com.intellij.plugins.haxe.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.*;
import java.lang.reflect.Field;
import org.jetbrains.annotations.NotNull;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/26/12 12:59 PM from the specification file
 * <tt>C:/workspace/idea/plugins/haxe/src/com/intellij/plugins/haxe/lang/lexer/haxe.flex</tt>
 */
public class _HaxeLexer implements FlexLexer, HaxeTokenTypes, HaxeTokenTypeSets {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\10\1\0\1\1\1\10\22\0\1\1\1\71\1\24"+
    "\1\101\1\0\1\100\1\75\1\22\1\62\1\63\1\7\1\20\1\65"+
    "\1\66\1\21\1\6\1\14\7\13\2\12\1\53\1\64\1\76\1\70"+
    "\1\67\1\73\1\5\1\11\1\54\2\11\1\17\1\11\21\2\1\16"+
    "\2\2\1\60\1\23\1\61\1\77\1\3\1\0\1\33\1\31\1\43"+
    "\1\35\1\26\1\36\1\44\1\50\1\30\1\2\1\34\1\40\1\47"+
    "\1\25\1\45\1\42\1\55\1\32\1\46\1\41\1\37\1\51\1\27"+
    "\1\15\1\52\1\2\1\56\1\74\1\57\1\72\53\0\1\2\12\0"+
    "\1\2\4\0\1\2\5\0\27\2\1\0\37\2\1\0\u013f\2\31\0"+
    "\162\2\4\0\14\2\16\0\5\2\11\0\1\2\213\0\1\2\13\0"+
    "\1\2\1\0\3\2\1\0\1\2\1\0\24\2\1\0\54\2\1\0"+
    "\46\2\1\0\5\2\4\0\202\2\10\0\105\2\1\0\46\2\2\0"+
    "\2\2\6\0\20\2\41\0\46\2\2\0\1\2\7\0\47\2\110\0"+
    "\33\2\5\0\3\2\56\0\32\2\5\0\13\2\25\0\12\4\4\0"+
    "\2\2\1\0\143\2\1\0\1\2\17\0\2\2\7\0\2\2\12\4"+
    "\3\2\2\0\1\2\20\0\1\2\1\0\36\2\35\0\3\2\60\0"+
    "\46\2\13\0\1\2\u0152\0\66\2\3\0\1\2\22\0\1\2\7\0"+
    "\12\2\4\0\12\4\25\0\10\2\2\0\2\2\2\0\26\2\1\0"+
    "\7\2\1\0\1\2\3\0\4\2\3\0\1\2\36\0\2\2\1\0"+
    "\3\2\4\0\12\4\2\2\23\0\6\2\4\0\2\2\2\0\26\2"+
    "\1\0\7\2\1\0\2\2\1\0\2\2\1\0\2\2\37\0\4\2"+
    "\1\0\1\2\7\0\12\4\2\0\3\2\20\0\11\2\1\0\3\2"+
    "\1\0\26\2\1\0\7\2\1\0\2\2\1\0\5\2\3\0\1\2"+
    "\22\0\1\2\17\0\2\2\4\0\12\4\25\0\10\2\2\0\2\2"+
    "\2\0\26\2\1\0\7\2\1\0\2\2\1\0\5\2\3\0\1\2"+
    "\36\0\2\2\1\0\3\2\4\0\12\4\1\0\1\2\21\0\1\2"+
    "\1\0\6\2\3\0\3\2\1\0\4\2\3\0\2\2\1\0\1\2"+
    "\1\0\2\2\3\0\2\2\3\0\3\2\3\0\10\2\1\0\3\2"+
    "\55\0\11\4\25\0\10\2\1\0\3\2\1\0\27\2\1\0\12\2"+
    "\1\0\5\2\46\0\2\2\4\0\12\4\25\0\10\2\1\0\3\2"+
    "\1\0\27\2\1\0\12\2\1\0\5\2\3\0\1\2\40\0\1\2"+
    "\1\0\2\2\4\0\12\4\25\0\10\2\1\0\3\2\1\0\27\2"+
    "\1\0\20\2\46\0\2\2\4\0\12\4\25\0\22\2\3\0\30\2"+
    "\1\0\11\2\1\0\1\2\2\0\7\2\72\0\60\2\1\0\2\2"+
    "\14\0\7\2\11\0\12\4\47\0\2\2\1\0\1\2\2\0\2\2"+
    "\1\0\1\2\2\0\1\2\6\0\4\2\1\0\7\2\1\0\3\2"+
    "\1\0\1\2\1\0\1\2\2\0\2\2\1\0\4\2\1\0\2\2"+
    "\11\0\1\2\2\0\5\2\1\0\1\2\11\0\12\4\2\0\2\2"+
    "\42\0\1\2\37\0\12\4\26\0\10\2\1\0\42\2\35\0\4\2"+
    "\164\0\42\2\1\0\5\2\1\0\2\2\25\0\12\4\6\0\6\2"+
    "\112\0\46\2\12\0\51\2\7\0\132\2\5\0\104\2\5\0\122\2"+
    "\6\0\7\2\1\0\77\2\1\0\1\2\1\0\4\2\2\0\7\2"+
    "\1\0\1\2\1\0\4\2\2\0\47\2\1\0\1\2\1\0\4\2"+
    "\2\0\37\2\1\0\1\2\1\0\4\2\2\0\7\2\1\0\1\2"+
    "\1\0\4\2\2\0\7\2\1\0\7\2\1\0\27\2\1\0\37\2"+
    "\1\0\1\2\1\0\4\2\2\0\7\2\1\0\47\2\1\0\23\2"+
    "\16\0\11\4\56\0\125\2\14\0\u026c\2\2\0\10\2\12\0\32\2"+
    "\5\0\113\2\25\0\15\2\1\0\4\2\16\0\22\2\16\0\22\2"+
    "\16\0\15\2\1\0\3\2\17\0\64\2\43\0\1\2\4\0\1\2"+
    "\3\0\12\4\46\0\12\4\6\0\130\2\10\0\51\2\127\0\35\2"+
    "\51\0\12\4\36\2\2\0\5\2\u038b\0\154\2\224\0\234\2\4\0"+
    "\132\2\6\0\26\2\2\0\6\2\2\0\46\2\2\0\6\2\2\0"+
    "\10\2\1\0\1\2\1\0\1\2\1\0\1\2\1\0\37\2\2\0"+
    "\65\2\1\0\7\2\1\0\1\2\3\0\3\2\1\0\7\2\3\0"+
    "\4\2\2\0\6\2\4\0\15\2\5\0\3\2\1\0\7\2\164\0"+
    "\1\2\15\0\1\2\202\0\1\2\4\0\1\2\2\0\12\2\1\0"+
    "\1\2\3\0\5\2\6\0\1\2\1\0\1\2\1\0\1\2\1\0"+
    "\4\2\1\0\3\2\1\0\7\2\3\0\3\2\5\0\5\2\u0ebb\0"+
    "\2\2\52\0\5\2\5\0\2\2\4\0\126\2\6\0\3\2\1\0"+
    "\132\2\1\0\4\2\5\0\50\2\4\0\136\2\21\0\30\2\70\0"+
    "\20\2\u0200\0\u19b6\2\112\0\u51a6\2\132\0\u048d\2\u0773\0\u2ba4\2\u215c\0"+
    "\u012e\2\2\0\73\2\225\0\7\2\14\0\5\2\5\0\1\2\1\0"+
    "\12\2\1\0\15\2\1\0\5\2\1\0\1\2\1\0\2\2\1\0"+
    "\2\2\1\0\154\2\41\0\u016b\2\22\0\100\2\2\0\66\2\50\0"+
    "\14\2\164\0\5\2\1\0\207\2\23\0\12\4\7\0\32\2\6\0"+
    "\32\2\13\0\131\2\3\0\6\2\2\0\6\2\2\0\6\2\2\0"+
    "\3\2\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\1\1\4\1\5\2\6"+
    "\1\7\1\10\1\11\1\12\17\3\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\1\3\0\1\37\1\0\1\40\1\41\1\42"+
    "\1\43\1\44\1\0\1\45\1\46\1\47\1\0\2\11"+
    "\2\12\6\3\1\50\1\51\4\3\1\52\24\3\1\53"+
    "\1\54\1\55\1\0\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\2\0\1\47"+
    "\17\0\1\41\1\71\1\72\1\73\1\74\17\3\1\75"+
    "\3\3\1\76\16\3\1\77\1\100\1\101\3\0\1\102"+
    "\2\0\1\103\21\0\2\71\1\3\1\104\1\3\1\105"+
    "\1\106\15\3\1\107\1\110\6\3\1\111\1\112\6\3"+
    "\1\113\25\0\1\41\1\0\1\114\2\3\1\115\4\3"+
    "\1\116\3\3\1\117\2\3\1\120\1\121\4\3\1\122"+
    "\1\123\3\3\1\124\1\3\1\0\1\125\2\0\1\126"+
    "\4\0\1\127\10\0\1\130\1\0\1\131\1\3\1\132"+
    "\1\133\2\3\1\134\1\135\7\3\1\136\2\3\1\137"+
    "\1\140\1\141\4\0\1\142\2\0\1\143\1\144\6\0"+
    "\1\145\1\146\2\3\1\147\1\150\1\3\1\151\1\152"+
    "\1\153\1\154\2\3\1\155\1\156\1\0\1\157\5\0"+
    "\1\160\1\0\1\161\2\3\1\162\1\163\1\164\1\165"+
    "\1\166\5\0\1\167\1\3\1\0\1\170\1\0\1\171"+
    "\1\172\1\173\1\174\1\175";

  private static int [] zzUnpackAction() {
    int [] result = new int[392];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c\0\u01ce"+
    "\0\u0210\0\u0252\0\u0294\0\u02d6\0\u0318\0\u035a\0\u039c\0\u03de"+
    "\0\u0420\0\u0462\0\u04a4\0\u04e6\0\u0528\0\u056a\0\u05ac\0\u05ee"+
    "\0\u0630\0\u0672\0\u06b4\0\u06f6\0\u0738\0\102\0\102\0\102"+
    "\0\102\0\102\0\102\0\102\0\102\0\102\0\u077a\0\u07bc"+
    "\0\u07fe\0\u0840\0\102\0\102\0\u0882\0\u08c4\0\u0906\0\u0948"+
    "\0\u098a\0\u09cc\0\u0108\0\u0a0e\0\u0a50\0\u0a92\0\u0ad4\0\u0b16"+
    "\0\u0b58\0\102\0\102\0\u0b9a\0\u0bdc\0\102\0\102\0\u0c1e"+
    "\0\u0c60\0\102\0\u0ca2\0\u0ce4\0\102\0\u0d26\0\u0d68\0\u0daa"+
    "\0\u0dec\0\u0e2e\0\u0e70\0\u0eb2\0\306\0\u0ef4\0\u0f36\0\u0f78"+
    "\0\u0fba\0\306\0\u0ffc\0\u103e\0\u1080\0\u10c2\0\u1104\0\u1146"+
    "\0\u1188\0\u11ca\0\u120c\0\u124e\0\u1290\0\u12d2\0\u1314\0\u1356"+
    "\0\u1398\0\u13da\0\u141c\0\u145e\0\u14a0\0\u14e2\0\102\0\102"+
    "\0\102\0\u1524\0\102\0\102\0\102\0\102\0\102\0\102"+
    "\0\102\0\102\0\u1566\0\102\0\102\0\u15a8\0\u15ea\0\u162c"+
    "\0\u162c\0\u166e\0\u16b0\0\u16f2\0\u1734\0\u1776\0\u17b8\0\u17fa"+
    "\0\u183c\0\u187e\0\u18c0\0\u1902\0\u1944\0\u1986\0\u19c8\0\u1a0a"+
    "\0\u1a4c\0\u0bdc\0\102\0\306\0\u1a8e\0\u1ad0\0\u1b12\0\u1b54"+
    "\0\u1b96\0\u1bd8\0\u1c1a\0\u1c5c\0\u1c9e\0\u1ce0\0\u1d22\0\u1d64"+
    "\0\u1da6\0\u1de8\0\u1e2a\0\306\0\u1e6c\0\u1eae\0\u1ef0\0\306"+
    "\0\u1f32\0\u1f74\0\u1fb6\0\u1ff8\0\u203a\0\u207c\0\u20be\0\u2100"+
    "\0\u2142\0\u2184\0\u21c6\0\u2208\0\u224a\0\u228c\0\306\0\102"+
    "\0\102\0\u22ce\0\u2310\0\u2352\0\102\0\u2394\0\u23d6\0\102"+
    "\0\u2418\0\u245a\0\u249c\0\u24de\0\u2520\0\u2562\0\u25a4\0\u25e6"+
    "\0\u2628\0\u266a\0\u26ac\0\u26ee\0\u2730\0\u2772\0\u27b4\0\u27f6"+
    "\0\u2838\0\u287a\0\102\0\u28bc\0\306\0\u28fe\0\306\0\306"+
    "\0\u2940\0\u2982\0\u29c4\0\u2a06\0\u2a48\0\u2a8a\0\u2acc\0\u2b0e"+
    "\0\u2b50\0\u2b92\0\u2bd4\0\u2c16\0\u2c58\0\306\0\306\0\u2c9a"+
    "\0\u2cdc\0\u2d1e\0\u2d60\0\u2da2\0\u2de4\0\306\0\306\0\u2e26"+
    "\0\u2e68\0\u2eaa\0\u2eec\0\u2f2e\0\u2f70\0\102\0\u2fb2\0\u2ff4"+
    "\0\u3036\0\u3078\0\u30ba\0\u30fc\0\u313e\0\u3180\0\u31c2\0\u3204"+
    "\0\u3246\0\u3288\0\u32ca\0\u330c\0\u334e\0\u3390\0\u33d2\0\u3414"+
    "\0\u3456\0\u3498\0\u34da\0\102\0\u351c\0\306\0\u355e\0\u35a0"+
    "\0\306\0\u35e2\0\u3624\0\u3666\0\u36a8\0\306\0\u36ea\0\u372c"+
    "\0\u376e\0\306\0\u37b0\0\u37f2\0\306\0\306\0\u3834\0\u3876"+
    "\0\u38b8\0\u38fa\0\306\0\306\0\u393c\0\u397e\0\u39c0\0\306"+
    "\0\u3a02\0\u3a44\0\u3a86\0\u3ac8\0\u3b0a\0\102\0\u3b4c\0\u3b8e"+
    "\0\u3bd0\0\u3c12\0\102\0\u3c54\0\u3c96\0\u3cd8\0\u3d1a\0\u3d5c"+
    "\0\u3d9e\0\u3de0\0\u3e22\0\102\0\u3e64\0\102\0\u3ea6\0\306"+
    "\0\306\0\u3ee8\0\u3f2a\0\306\0\306\0\u3f6c\0\u3fae\0\u3ff0"+
    "\0\u4032\0\u4074\0\u40b6\0\u40f8\0\306\0\u413a\0\u417c\0\306"+
    "\0\306\0\102\0\u41be\0\u4200\0\u4242\0\u4284\0\102\0\u42c6"+
    "\0\u4308\0\102\0\102\0\u434a\0\u438c\0\u43ce\0\u4410\0\u4452"+
    "\0\u4494\0\102\0\306\0\u44d6\0\u4518\0\306\0\306\0\u455a"+
    "\0\306\0\306\0\306\0\306\0\u459c\0\u45de\0\102\0\102"+
    "\0\u4620\0\102\0\u4662\0\u46a4\0\u46e6\0\u4728\0\u476a\0\102"+
    "\0\u47ac\0\102\0\u47ee\0\u4830\0\306\0\306\0\306\0\102"+
    "\0\102\0\u4872\0\u48b4\0\u48f6\0\u4938\0\u497a\0\306\0\u49bc"+
    "\0\u49fe\0\102\0\u4a40\0\102\0\102\0\306\0\102\0\102";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[392];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\10\1\3"+
    "\1\4\2\11\1\12\3\4\1\13\1\14\1\15\1\2"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\2\4"+
    "\1\25\1\26\1\27\1\4\1\30\1\31\1\32\1\4"+
    "\1\33\1\34\2\4\1\35\1\4\1\36\2\4\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\103\0\1\3\6\0\1\3\73\0"+
    "\3\4\4\0\7\4\5\0\26\4\1\0\2\4\30\0"+
    "\1\63\5\0\3\63\2\0\1\64\1\0\1\65\4\0"+
    "\1\64\55\0\2\66\5\0\1\66\3\0\3\66\5\0"+
    "\26\66\1\67\2\66\32\0\1\70\1\71\60\0\1\72"+
    "\101\0\1\73\15\0\1\63\5\0\3\11\2\0\1\64"+
    "\1\0\1\65\4\0\1\64\57\0\1\63\5\0\1\63"+
    "\2\74\2\75\1\64\1\0\1\65\4\0\1\64\73\0"+
    "\1\76\47\0\1\77\15\0\1\100\5\0\3\100\4\0"+
    "\1\101\60\0\10\15\1\0\11\15\1\102\1\103\56\15"+
    "\10\16\1\0\12\16\1\104\1\105\55\16\2\0\3\4"+
    "\4\0\7\4\5\0\1\4\1\106\10\4\1\107\13\4"+
    "\1\0\2\4\26\0\3\4\4\0\4\4\1\110\2\4"+
    "\5\0\1\111\12\4\1\112\12\4\1\0\2\4\26\0"+
    "\3\4\4\0\7\4\5\0\23\4\1\113\2\4\1\0"+
    "\2\4\26\0\3\4\4\0\7\4\5\0\1\114\10\4"+
    "\1\115\10\4\1\116\3\4\1\0\2\4\26\0\3\4"+
    "\4\0\7\4\5\0\5\4\1\117\20\4\1\0\2\4"+
    "\26\0\3\4\4\0\7\4\5\0\1\4\1\120\24\4"+
    "\1\0\2\4\26\0\3\4\4\0\7\4\5\0\1\4"+
    "\1\121\16\4\1\122\4\4\1\123\1\0\2\4\26\0"+
    "\3\4\4\0\7\4\5\0\6\4\1\124\3\4\1\125"+
    "\5\4\1\126\5\4\1\0\2\4\26\0\3\4\4\0"+
    "\7\4\5\0\1\127\20\4\1\130\4\4\1\0\2\4"+
    "\26\0\3\4\4\0\7\4\5\0\5\4\1\131\15\4"+
    "\1\132\1\4\1\133\1\0\2\4\26\0\3\4\4\0"+
    "\7\4\5\0\5\4\1\134\1\135\3\4\1\136\13\4"+
    "\1\0\2\4\26\0\3\4\4\0\7\4\5\0\6\4"+
    "\1\137\4\4\1\140\4\4\1\141\5\4\1\0\2\4"+
    "\26\0\3\4\4\0\7\4\5\0\24\4\1\142\1\4"+
    "\1\0\2\4\26\0\3\4\4\0\7\4\5\0\2\4"+
    "\1\143\7\4\1\144\1\4\1\145\11\4\1\0\2\4"+
    "\26\0\3\4\4\0\7\4\5\0\6\4\1\146\17\4"+
    "\1\0\2\4\112\0\1\147\1\150\1\151\100\0\1\152"+
    "\1\153\101\0\1\154\101\0\1\155\101\0\1\156\3\0"+
    "\1\157\75\0\1\160\4\0\1\161\74\0\1\162\5\0"+
    "\1\163\73\0\1\164\101\0\1\165\37\0\1\166\1\0"+
    "\1\167\55\0\1\170\5\0\3\170\3\0\1\171\45\0"+
    "\1\171\17\0\1\100\5\0\3\100\67\0\3\66\4\0"+
    "\7\66\5\0\26\66\1\0\2\66\51\0\1\172\3\0"+
    "\1\173\1\174\1\175\1\176\1\177\1\200\3\0\1\201"+
    "\1\202\1\203\1\204\1\205\1\206\1\207\31\0\10\70"+
    "\1\0\71\70\7\210\1\211\72\210\4\0\1\63\5\0"+
    "\1\63\2\74\2\0\1\64\1\0\1\65\4\0\1\64"+
    "\64\0\4\212\2\0\1\212\6\0\1\212\2\0\1\212"+
    "\1\0\1\212\1\0\2\212\4\0\1\212\10\0\1\212"+
    "\31\0\1\100\5\0\3\100\2\0\1\64\6\0\1\64"+
    "\74\0\1\213\60\0\10\15\1\0\71\15\10\16\1\0"+
    "\71\16\2\0\3\4\4\0\7\4\5\0\2\4\1\214"+
    "\21\4\1\215\1\4\1\0\2\4\26\0\3\4\4\0"+
    "\7\4\5\0\13\4\1\216\12\4\1\0\2\4\26\0"+
    "\3\4\4\0\7\4\5\0\14\4\1\217\11\4\1\0"+
    "\2\4\26\0\3\4\4\0\7\4\5\0\12\4\1\220"+
    "\13\4\1\0\2\4\26\0\3\4\4\0\7\4\5\0"+
    "\21\4\1\221\4\4\1\0\2\4\26\0\3\4\4\0"+
    "\7\4\5\0\3\4\1\222\22\4\1\0\2\4\26\0"+
    "\3\4\4\0\7\4\5\0\13\4\1\223\1\224\11\4"+
    "\1\0\2\4\26\0\3\4\4\0\7\4\5\0\15\4"+
    "\1\225\10\4\1\0\2\4\26\0\3\4\4\0\7\4"+
    "\5\0\1\4\1\226\24\4\1\0\2\4\26\0\3\4"+
    "\4\0\7\4\5\0\14\4\1\227\11\4\1\0\2\4"+
    "\26\0\3\4\4\0\7\4\5\0\11\4\1\230\14\4"+
    "\1\0\2\4\26\0\3\4\4\0\7\4\5\0\1\231"+
    "\25\4\1\0\2\4\26\0\3\4\4\0\7\4\5\0"+
    "\13\4\1\232\12\4\1\0\2\4\26\0\3\4\4\0"+
    "\7\4\5\0\1\233\25\4\1\0\2\4\26\0\3\4"+
    "\4\0\7\4\5\0\5\4\1\234\20\4\1\0\2\4"+
    "\26\0\3\4\4\0\7\4\5\0\14\4\1\235\11\4"+
    "\1\0\2\4\26\0\3\4\4\0\7\4\5\0\3\4"+
    "\1\236\22\4\1\0\2\4\26\0\3\4\4\0\7\4"+
    "\5\0\12\4\1\237\12\4\1\240\1\0\2\4\26\0"+
    "\3\4\4\0\7\4\5\0\3\4\1\241\1\4\1\242"+
    "\20\4\1\0\2\4\26\0\3\4\4\0\7\4\5\0"+
    "\15\4\1\243\10\4\1\0\2\4\26\0\3\4\4\0"+
    "\7\4\5\0\3\4\1\244\22\4\1\0\2\4\26\0"+
    "\3\4\4\0\7\4\5\0\16\4\1\245\7\4\1\0"+
    "\2\4\26\0\3\4\4\0\7\4\5\0\4\4\1\246"+
    "\21\4\1\0\2\4\26\0\3\4\4\0\7\4\5\0"+
    "\14\4\1\247\4\4\1\250\4\4\1\0\2\4\26\0"+
    "\3\4\4\0\7\4\5\0\6\4\1\251\17\4\1\0"+
    "\2\4\26\0\3\4\4\0\7\4\5\0\1\252\25\4"+
    "\1\0\2\4\26\0\3\4\4\0\7\4\5\0\1\4"+
    "\1\253\24\4\1\0\2\4\26\0\3\4\4\0\7\4"+
    "\5\0\3\4\1\254\22\4\1\0\2\4\26\0\3\4"+
    "\4\0\7\4\5\0\15\4\1\255\10\4\1\0\2\4"+
    "\26\0\3\4\4\0\7\4\5\0\6\4\1\256\17\4"+
    "\1\0\2\4\26\0\3\4\4\0\7\4\5\0\5\4"+
    "\1\257\20\4\1\0\2\4\114\0\1\260\101\0\1\261"+
    "\36\0\1\262\4\0\1\263\5\0\1\264\77\0\1\265"+
    "\47\0\1\170\5\0\3\170\120\0\1\266\11\0\1\267"+
    "\1\270\63\0\1\271\6\0\1\272\70\0\1\273\112\0"+
    "\1\274\70\0\1\275\101\0\1\276\103\0\1\277\2\0"+
    "\1\300\100\0\1\301\114\0\1\302\62\0\1\303\124\0"+
    "\1\304\56\0\1\305\101\0\1\306\4\0\1\307\101\0"+
    "\1\310\46\0\7\210\1\311\72\210\6\312\1\313\1\211"+
    "\72\312\2\0\3\4\4\0\7\4\5\0\1\4\1\314"+
    "\24\4\1\0\2\4\26\0\3\4\4\0\7\4\5\0"+
    "\13\4\1\315\12\4\1\0\2\4\26\0\3\4\4\0"+
    "\7\4\5\0\1\4\1\316\24\4\1\0\2\4\26\0"+
    "\3\4\4\0\7\4\5\0\22\4\1\317\3\4\1\0"+
    "\2\4\26\0\3\4\4\0\7\4\5\0\1\4\1\320"+
    "\24\4\1\0\2\4\26\0\3\4\4\0\7\4\5\0"+
    "\13\4\1\321\12\4\1\0\2\4\26\0\3\4\4\0"+
    "\7\4\5\0\3\4\1\322\22\4\1\0\2\4\26\0"+
    "\3\4\4\0\7\4\5\0\1\4\1\323\24\4\1\0"+
    "\2\4\26\0\3\4\4\0\7\4\5\0\13\4\1\324"+
    "\4\4\1\325\5\4\1\0\2\4\26\0\3\4\4\0"+
    "\7\4\5\0\6\4\1\326\17\4\1\0\2\4\26\0"+
    "\3\4\4\0\7\4\5\0\12\4\1\327\13\4\1\0"+
    "\2\4\26\0\3\4\4\0\7\4\5\0\6\4\1\330"+
    "\17\4\1\0\2\4\26\0\3\4\4\0\7\4\5\0"+
    "\6\4\1\331\17\4\1\0\2\4\26\0\3\4\4\0"+
    "\7\4\5\0\21\4\1\332\4\4\1\0\2\4\26\0"+
    "\3\4\4\0\7\4\5\0\16\4\1\333\7\4\1\0"+
    "\2\4\26\0\3\4\4\0\7\4\5\0\25\4\1\334"+
    "\1\0\2\4\26\0\3\4\4\0\7\4\5\0\1\335"+
    "\25\4\1\0\2\4\26\0\3\4\4\0\7\4\5\0"+
    "\1\4\1\336\24\4\1\0\2\4\26\0\3\4\4\0"+
    "\7\4\5\0\21\4\1\337\4\4\1\0\2\4\26\0"+
    "\3\4\4\0\7\4\5\0\20\4\1\340\5\4\1\0"+
    "\2\4\26\0\3\4\4\0\7\4\5\0\1\4\1\341"+
    "\24\4\1\0\2\4\26\0\3\4\4\0\7\4\5\0"+
    "\24\4\1\342\1\4\1\0\2\4\26\0\3\4\4\0"+
    "\7\4\5\0\7\4\1\343\16\4\1\0\2\4\26\0"+
    "\3\4\4\0\7\4\5\0\13\4\1\344\12\4\1\0"+
    "\2\4\26\0\3\4\4\0\7\4\5\0\16\4\1\345"+
    "\7\4\1\0\2\4\26\0\3\4\4\0\7\4\5\0"+
    "\1\4\1\346\12\4\1\347\11\4\1\0\2\4\26\0"+
    "\3\4\4\0\7\4\5\0\21\4\1\350\4\4\1\0"+
    "\2\4\26\0\3\4\4\0\7\4\5\0\14\4\1\351"+
    "\11\4\1\0\2\4\26\0\3\4\4\0\7\4\5\0"+
    "\5\4\1\352\20\4\1\0\2\4\26\0\3\4\4\0"+
    "\7\4\5\0\14\4\1\353\11\4\1\0\2\4\26\0"+
    "\3\4\4\0\7\4\5\0\1\4\1\354\24\4\1\0"+
    "\2\4\26\0\3\4\4\0\7\4\5\0\14\4\1\355"+
    "\11\4\1\0\2\4\61\0\1\356\76\0\1\357\115\0"+
    "\1\360\74\0\1\361\75\0\1\362\71\0\1\363\13\0"+
    "\1\364\70\0\1\365\126\0\1\366\65\0\1\367\66\0"+
    "\1\370\104\0\1\371\75\0\1\372\110\0\1\373\112\0"+
    "\1\374\66\0\1\375\110\0\1\376\66\0\1\377\114\0"+
    "\1\u0100\101\0\1\u0101\103\0\1\u0102\101\0\1\u0103\36\0"+
    "\6\210\1\u0104\1\311\72\210\7\312\1\u0105\72\312\2\0"+
    "\3\4\4\0\7\4\5\0\5\4\1\u0106\20\4\1\0"+
    "\2\4\26\0\3\4\4\0\7\4\5\0\1\u0107\4\4"+
    "\1\u0108\20\4\1\0\2\4\26\0\3\4\4\0\7\4"+
    "\5\0\1\4\1\u0109\24\4\1\0\2\4\26\0\3\4"+
    "\4\0\7\4\5\0\1\u010a\25\4\1\0\2\4\26\0"+
    "\3\4\4\0\7\4\5\0\5\4\1\u010b\20\4\1\0"+
    "\2\4\26\0\3\4\4\0\7\4\5\0\1\4\1\u010c"+
    "\24\4\1\0\2\4\26\0\3\4\4\0\7\4\5\0"+
    "\5\4\1\u010d\20\4\1\0\2\4\26\0\3\4\4\0"+
    "\7\4\5\0\7\4\1\u010e\16\4\1\0\2\4\26\0"+
    "\3\4\4\0\7\4\5\0\5\4\1\u010f\20\4\1\0"+
    "\2\4\26\0\3\4\4\0\7\4\5\0\12\4\1\u0110"+
    "\13\4\1\0\2\4\26\0\3\4\4\0\7\4\5\0"+
    "\22\4\1\u0111\3\4\1\0\2\4\26\0\3\4\4\0"+
    "\7\4\5\0\1\4\1\u0112\24\4\1\0\2\4\26\0"+
    "\3\4\4\0\7\4\5\0\14\4\1\u0113\11\4\1\0"+
    "\2\4\26\0\3\4\4\0\7\4\5\0\15\4\1\u0114"+
    "\10\4\1\0\2\4\26\0\3\4\4\0\7\4\5\0"+
    "\17\4\1\u0115\6\4\1\0\2\4\26\0\3\4\4\0"+
    "\7\4\5\0\2\4\1\u0116\23\4\1\0\2\4\26\0"+
    "\3\4\4\0\7\4\5\0\10\4\1\u0117\15\4\1\0"+
    "\2\4\26\0\3\4\4\0\7\4\5\0\6\4\1\u0118"+
    "\17\4\1\0\2\4\26\0\3\4\4\0\7\4\5\0"+
    "\6\4\1\u0119\17\4\1\0\2\4\26\0\3\4\4\0"+
    "\7\4\5\0\3\4\1\u011a\22\4\1\0\2\4\26\0"+
    "\3\4\4\0\7\4\5\0\23\4\1\u011b\2\4\1\0"+
    "\2\4\26\0\3\4\4\0\7\4\5\0\21\4\1\u011c"+
    "\4\4\1\0\2\4\26\0\3\4\4\0\7\4\5\0"+
    "\3\4\1\u011d\22\4\1\0\2\4\26\0\3\4\4\0"+
    "\7\4\5\0\5\4\1\u011e\20\4\1\0\2\4\26\0"+
    "\3\4\4\0\7\4\5\0\16\4\1\u011f\7\4\1\0"+
    "\2\4\26\0\3\4\4\0\7\4\5\0\5\4\1\u0120"+
    "\20\4\1\0\2\4\26\0\3\4\4\0\7\4\5\0"+
    "\3\4\1\u0121\22\4\1\0\2\4\71\0\1\u0122\62\0"+
    "\1\u0123\103\0\1\u0124\77\0\1\u0125\110\0\1\u0126\113\0"+
    "\1\u0127\72\0\1\u0128\100\0\1\u0129\107\0\1\u012a\76\0"+
    "\1\u012b\76\0\1\u012c\75\0\1\u012d\74\0\1\u012e\114\0"+
    "\1\u012f\66\0\1\u0130\114\0\1\u0131\72\0\1\u0132\110\0"+
    "\1\u0133\73\0\1\u0134\100\0\1\u0135\103\0\1\u0136\45\0"+
    "\6\312\1\313\1\u0105\72\312\2\0\3\4\4\0\7\4"+
    "\5\0\10\4\1\u0137\15\4\1\0\2\4\26\0\3\4"+
    "\4\0\7\4\5\0\1\u0138\25\4\1\0\2\4\26\0"+
    "\3\4\4\0\7\4\5\0\1\4\1\u0139\24\4\1\0"+
    "\2\4\26\0\3\4\4\0\7\4\5\0\11\4\1\u013a"+
    "\14\4\1\0\2\4\26\0\3\4\4\0\7\4\5\0"+
    "\22\4\1\u013b\3\4\1\0\2\4\26\0\3\4\4\0"+
    "\7\4\5\0\14\4\1\u013c\11\4\1\0\2\4\26\0"+
    "\3\4\4\0\7\4\5\0\1\u013d\25\4\1\0\2\4"+
    "\26\0\3\4\4\0\7\4\5\0\13\4\1\u013e\12\4"+
    "\1\0\2\4\26\0\3\4\4\0\7\4\5\0\3\4"+
    "\1\u013f\22\4\1\0\2\4\26\0\3\4\4\0\7\4"+
    "\5\0\3\4\1\u0140\22\4\1\0\2\4\26\0\3\4"+
    "\4\0\7\4\5\0\1\4\1\u0141\24\4\1\0\2\4"+
    "\26\0\3\4\4\0\7\4\5\0\1\4\1\u0142\24\4"+
    "\1\0\2\4\26\0\3\4\4\0\7\4\5\0\14\4"+
    "\1\u0143\11\4\1\0\2\4\26\0\3\4\4\0\7\4"+
    "\5\0\17\4\1\u0144\6\4\1\0\2\4\26\0\3\4"+
    "\4\0\7\4\5\0\16\4\1\u0145\7\4\1\0\2\4"+
    "\26\0\3\4\4\0\7\4\5\0\1\u0146\25\4\1\0"+
    "\2\4\26\0\3\4\4\0\7\4\5\0\3\4\1\u0147"+
    "\22\4\1\0\2\4\26\0\3\4\4\0\7\4\5\0"+
    "\23\4\1\u0148\2\4\1\0\2\4\26\0\3\4\4\0"+
    "\7\4\5\0\16\4\1\u0149\7\4\1\0\2\4\56\0"+
    "\1\u014a\77\0\1\u014b\122\0\1\u014c\61\0\1\u014d\103\0"+
    "\1\u014e\103\0\1\u014f\74\0\1\u0150\125\0\1\u0151\71\0"+
    "\1\u0152\75\0\1\u0153\60\0\1\u0154\110\0\1\u0155\56\0"+
    "\1\u0156\124\0\1\u0157\113\0\1\u0158\67\0\1\u0159\120\0"+
    "\1\u015a\36\0\3\4\4\0\7\4\5\0\21\4\1\u015b"+
    "\4\4\1\0\2\4\26\0\3\4\4\0\7\4\5\0"+
    "\6\4\1\u015c\17\4\1\0\2\4\26\0\3\4\4\0"+
    "\7\4\5\0\1\4\1\u015d\24\4\1\0\2\4\26\0"+
    "\3\4\4\0\7\4\5\0\14\4\1\u015e\11\4\1\0"+
    "\2\4\26\0\3\4\4\0\7\4\5\0\16\4\1\u015f"+
    "\7\4\1\0\2\4\26\0\3\4\4\0\7\4\5\0"+
    "\20\4\1\u0160\5\4\1\0\2\4\26\0\3\4\4\0"+
    "\7\4\5\0\10\4\1\u0161\15\4\1\0\2\4\26\0"+
    "\3\4\4\0\7\4\5\0\11\4\1\u0162\14\4\1\0"+
    "\2\4\26\0\3\4\4\0\7\4\5\0\1\4\1\u0163"+
    "\24\4\1\0\2\4\26\0\3\4\4\0\7\4\5\0"+
    "\1\4\1\u0164\24\4\1\0\2\4\26\0\3\4\4\0"+
    "\7\4\5\0\12\4\1\u0165\13\4\1\0\2\4\26\0"+
    "\3\4\4\0\7\4\5\0\10\4\1\u0166\15\4\1\0"+
    "\2\4\62\0\1\u0167\71\0\1\u0168\112\0\1\u0169\104\0"+
    "\1\u016a\71\0\1\u016b\106\0\1\u016c\67\0\1\u016d\117\0"+
    "\1\u016e\71\0\1\u016f\100\0\1\u0170\114\0\1\u0171\66\0"+
    "\1\u0172\51\0\3\4\4\0\7\4\5\0\16\4\1\u0173"+
    "\7\4\1\0\2\4\26\0\3\4\4\0\7\4\5\0"+
    "\1\u0174\25\4\1\0\2\4\26\0\3\4\4\0\7\4"+
    "\5\0\1\u0175\25\4\1\0\2\4\26\0\3\4\4\0"+
    "\7\4\5\0\1\4\1\u0176\24\4\1\0\2\4\26\0"+
    "\3\4\4\0\7\4\5\0\1\4\1\u0177\24\4\1\0"+
    "\2\4\70\0\1\u0178\63\0\1\u0179\103\0\1\u017a\110\0"+
    "\1\u017b\103\0\1\u017c\102\0\1\u017d\72\0\1\u017e\50\0"+
    "\3\4\4\0\7\4\5\0\1\4\1\u017f\24\4\1\0"+
    "\2\4\26\0\3\4\4\0\7\4\5\0\14\4\1\u0180"+
    "\11\4\1\0\2\4\64\0\1\u0181\110\0\1\u0182\60\0"+
    "\1\u0183\103\0\1\u0184\106\0\1\u0185\46\0\3\4\4\0"+
    "\7\4\5\0\21\4\1\u0186\4\4\1\0\2\4\61\0"+
    "\1\u0187\101\0\1\u0188\44\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19074];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\33\1\11\11\4\1\2\11\6\1\3\0"+
    "\1\1\1\0\2\1\2\11\1\1\1\0\2\11\1\1"+
    "\1\0\1\11\2\1\1\11\41\1\3\11\1\0\10\11"+
    "\1\1\2\11\2\0\1\1\17\0\3\1\1\11\44\1"+
    "\2\11\3\0\1\11\2\0\1\11\21\0\1\1\1\11"+
    "\42\1\1\11\25\0\1\11\1\0\34\1\1\0\1\1"+
    "\2\0\1\11\4\0\1\11\10\0\1\11\1\0\1\11"+
    "\23\1\1\11\4\0\1\11\2\0\2\11\6\0\1\11"+
    "\14\1\2\11\1\0\1\11\5\0\1\11\1\0\1\11"+
    "\5\1\2\11\5\0\2\1\1\0\1\11\1\0\2\11"+
    "\1\1\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[392];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  public _HaxeLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _HaxeLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1324) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 113: 
          { return KSETTER;
          }
        case 126: break;
        case 41: 
          { return KIF ;
          }
        case 127: break;
        case 20: 
          { return OMINUS;
          }
        case 128: break;
        case 24: 
          { return OCOMPLEMENT;
          }
        case 129: break;
        case 95: 
          { return KSWITCH ;
          }
        case 130: break;
        case 33: 
          { return MML_COMMENT;
          }
        case 131: break;
        case 27: 
          { return OBIT_AND;
          }
        case 132: break;
        case 25: 
          { return OQUEST;
          }
        case 133: break;
        case 10: 
          { return LITSTRING;
          }
        case 134: break;
        case 4: 
          { return OQUOTIENT;
          }
        case 135: break;
        case 116: 
          { return KOVERRIDE;
          }
        case 136: break;
        case 74: 
          { return( KCAST );
          }
        case 137: break;
        case 125: 
          { return KPROTECTED;
          }
        case 138: break;
        case 50: 
          { return OCOND_OR;
          }
        case 139: break;
        case 81: 
          { return KTHROW ;
          }
        case 140: break;
        case 71: 
          { return KTRUE ;
          }
        case 141: break;
        case 3: 
          { return ID;
          }
        case 142: break;
        case 112: 
          { return KGETTER;
          }
        case 143: break;
        case 49: 
          { return OBIT_OR_ASSIGN;
          }
        case 144: break;
        case 34: 
          { return OQUOTIENT_ASSIGN;
          }
        case 145: break;
        case 54: 
          { return OSHIFT_LEFT;
          }
        case 146: break;
        case 92: 
          { return KIMPORT ;
          }
        case 147: break;
        case 68: 
          { return KNULL ;
          }
        case 148: break;
        case 102: 
          { return( KEXTENDS );
          }
        case 149: break;
        case 69: 
          { return( KENUM );
          }
        case 150: break;
        case 15: 
          { return PRBRACK;
          }
        case 151: break;
        case 44: 
          { return OARROW;
          }
        case 152: break;
        case 1: 
          { yybegin(YYINITIAL); return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 153: break;
        case 14: 
          { return PLBRACK;
          }
        case 154: break;
        case 82: 
          { return KCATCH;
          }
        case 155: break;
        case 91: 
          { return KINLINE;
          }
        case 156: break;
        case 121: 
          { return KCOREAPI;
          }
        case 157: break;
        case 108: 
          { return( KPACKAGE );
          }
        case 158: break;
        case 96: 
          { return KSTATIC;
          }
        case 159: break;
        case 72: 
          { return KTHIS ;
          }
        case 160: break;
        case 123: 
          { return( KIMPLEMENTS );
          }
        case 161: break;
        case 89: 
          { return KHACK;
          }
        case 162: break;
        case 2: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 163: break;
        case 31: 
          { return MACRO_ID;
          }
        case 164: break;
        case 119: 
          { return( KINTERFACE );
          }
        case 165: break;
        case 38: 
          { return OPLUS_ASSIGN;
          }
        case 166: break;
        case 29: 
          { return OBIT_XOR;
          }
        case 167: break;
        case 37: 
          { return OPLUS_PLUS;
          }
        case 168: break;
        case 117: 
          { return KNODEBUG;
          }
        case 169: break;
        case 90: 
          { return KEXTERN;
          }
        case 170: break;
        case 56: 
          { return OREMAINDER_ASSIGN;
          }
        case 171: break;
        case 79: 
          { return KFALSE ;
          }
        case 172: break;
        case 98: 
          { return KBUILD;
          }
        case 173: break;
        case 36: 
          { return LITOCT;
          }
        case 174: break;
        case 11: 
          { return OCOLON;
          }
        case 175: break;
        case 65: 
          { return OSHIFT_LEFT_ASSIGN;
          }
        case 176: break;
        case 85: 
          { return PPELSE;
          }
        case 177: break;
        case 53: 
          { return OLESS_OR_EQUAL;
          }
        case 178: break;
        case 32: 
          { return MSL_COMMENT;
          }
        case 179: break;
        case 63: 
          { return KVAR;
          }
        case 180: break;
        case 86: 
          { return KBIND;
          }
        case 181: break;
        case 8: 
          { return ODOT;
          }
        case 182: break;
        case 45: 
          { return OMINUS_ASSIGN;
          }
        case 183: break;
        case 100: 
          { return KFINAL;
          }
        case 184: break;
        case 75: 
          { return PPEND;
          }
        case 185: break;
        case 28: 
          { return OLESS;
          }
        case 186: break;
        case 58: 
          { return LITHEX;
          }
        case 187: break;
        case 39: 
          { return LITFLOAT;
          }
        case 188: break;
        case 93: 
          { return KRETURN ;
          }
        case 189: break;
        case 17: 
          { return PRPAREN;
          }
        case 190: break;
        case 60: 
          { return ONEW;
          }
        case 191: break;
        case 43: 
          { return OMINUS_MINUS;
          }
        case 192: break;
        case 16: 
          { return PLPAREN;
          }
        case 193: break;
        case 124: 
          { return KAUTOBUILD;
          }
        case 194: break;
        case 94: 
          { return KPUBLIC;
          }
        case 195: break;
        case 88: 
          { return KMETA;
          }
        case 196: break;
        case 61: 
          { return KFOR ;
          }
        case 197: break;
        case 26: 
          { return OBIT_OR;
          }
        case 198: break;
        case 110: 
          { return KNATIVE;
          }
        case 199: break;
        case 104: 
          { return KDYNAMIC;
          }
        case 200: break;
        case 103: 
          { return( KDEFAULT );
          }
        case 201: break;
        case 21: 
          { return OGREATER;
          }
        case 202: break;
        case 76: 
          { return KNEVER;
          }
        case 203: break;
        case 19: 
          { return OCOMMA;
          }
        case 204: break;
        case 114: 
          { return( KFUNCTION );
          }
        case 205: break;
        case 84: 
          { return KSUPER ;
          }
        case 206: break;
        case 9: 
          { return LITCHAR;
          }
        case 207: break;
        case 47: 
          { return OEQ;
          }
        case 208: break;
        case 42: 
          { return KDO ;
          }
        case 209: break;
        case 122: 
          { return KOVERLOAD;
          }
        case 210: break;
        case 118: 
          { return KREQUIRE;
          }
        case 211: break;
        case 107: 
          { return KPRIVATE;
          }
        case 212: break;
        case 64: 
          { return OSHIFT_RIGHT_ASSIGN;
          }
        case 213: break;
        case 23: 
          { return ONOT;
          }
        case 214: break;
        case 13: 
          { return PRCURLY;
          }
        case 215: break;
        case 62: 
          { return KTRY;
          }
        case 216: break;
        case 109: 
          { return PPELSEIF;
          }
        case 217: break;
        case 73: 
          { return( KCASE );
          }
        case 218: break;
        case 12: 
          { return PLCURLY;
          }
        case 219: break;
        case 83: 
          { return( KCLASS );
          }
        case 220: break;
        case 101: 
          { return KMACRO;
          }
        case 221: break;
        case 99: 
          { return KDEBUG;
          }
        case 222: break;
        case 22: 
          { return OASSIGN;
          }
        case 223: break;
        case 46: 
          { return OGREATER_OR_EQUAL;
          }
        case 224: break;
        case 5: 
          { return OMUL;
          }
        case 225: break;
        case 52: 
          { return OCOND_AND;
          }
        case 226: break;
        case 80: 
          { return KUSING ;
          }
        case 227: break;
        case 48: 
          { return ONOT_EQ;
          }
        case 228: break;
        case 120: 
          { return KFAKEENUM;
          }
        case 229: break;
        case 77: 
          { return KWHILE ;
          }
        case 230: break;
        case 51: 
          { return OBIT_AND_ASSIGN;
          }
        case 231: break;
        case 7: 
          { return OPLUS;
          }
        case 232: break;
        case 70: 
          { return KELSE ;
          }
        case 233: break;
        case 6: 
          { return LITINT;
          }
        case 234: break;
        case 57: 
          { return DOC_COMMENT;
          }
        case 235: break;
        case 115: 
          { return KCONTINUE ;
          }
        case 236: break;
        case 67: 
          { return KNS;
          }
        case 237: break;
        case 111: 
          { return KBITMAP;
          }
        case 238: break;
        case 105: 
          { return KUNTYPED;
          }
        case 239: break;
        case 87: 
          { return KKEEP;
          }
        case 240: break;
        case 78: 
          { return( KBREAK );
          }
        case 241: break;
        case 18: 
          { return OSEMI;
          }
        case 242: break;
        case 30: 
          { return OREMAINDER;
          }
        case 243: break;
        case 35: 
          { return OMUL_ASSIGN;
          }
        case 244: break;
        case 40: 
          { return OIN;
          }
        case 245: break;
        case 106: 
          { return KTYPEDEF;
          }
        case 246: break;
        case 97: 
          { return PPERROR;
          }
        case 247: break;
        case 55: 
          { return OBIT_XOR_ASSIGN;
          }
        case 248: break;
        case 59: 
          { return OTRIPLE_DOT;
          }
        case 249: break;
        case 66: 
          { return PPIF;
          }
        case 250: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
