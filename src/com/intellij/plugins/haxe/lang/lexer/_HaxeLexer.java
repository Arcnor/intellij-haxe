/* The following code was generated by JFlex 1.4.3 on 2/4/13 1:31 PM */

package com.intellij.plugins.haxe.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.*;
import java.lang.reflect.Field;
import org.jetbrains.annotations.NotNull;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 2/4/13 1:31 PM from the specification file
 * <tt>C:/workspace/idea/plugins/haxe/src/com/intellij/plugins/haxe/lang/lexer/haxe.flex</tt>
 */
public class _HaxeLexer implements FlexLexer, HaxeTokenTypes, HaxeTokenTypeSets {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int APOS_STRING = 4;
  public static final int YYINITIAL = 0;
  public static final int LONG_TEMPLATE_ENTRY = 8;
  public static final int QUO_STRING = 2;
  public static final int SHORT_TEMPLATE_ENTRY = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\6\1\0\1\1\1\6\22\0\1\1\1\73\1\27"+
    "\1\102\1\7\1\101\1\76\1\30\1\64\1\65\1\13\1\25\1\67"+
    "\1\70\1\26\1\12\1\17\7\16\2\15\1\11\1\66\1\77\1\72"+
    "\1\71\1\74\1\10\1\14\1\60\2\14\1\24\1\14\21\2\1\21"+
    "\2\2\1\62\1\5\1\63\1\100\1\3\1\0\1\41\1\37\1\51"+
    "\1\43\1\34\1\44\1\52\1\55\1\36\1\2\1\42\1\46\1\23"+
    "\1\33\1\53\1\50\1\61\1\40\1\54\1\47\1\45\1\56\1\35"+
    "\1\20\1\57\1\2\1\31\1\75\1\32\1\22\53\0\1\2\12\0"+
    "\1\2\4\0\1\2\5\0\27\2\1\0\37\2\1\0\u013f\2\31\0"+
    "\162\2\4\0\14\2\16\0\5\2\11\0\1\2\213\0\1\2\13\0"+
    "\1\2\1\0\3\2\1\0\1\2\1\0\24\2\1\0\54\2\1\0"+
    "\46\2\1\0\5\2\4\0\202\2\10\0\105\2\1\0\46\2\2\0"+
    "\2\2\6\0\20\2\41\0\46\2\2\0\1\2\7\0\47\2\110\0"+
    "\33\2\5\0\3\2\56\0\32\2\5\0\13\2\25\0\12\4\4\0"+
    "\2\2\1\0\143\2\1\0\1\2\17\0\2\2\7\0\2\2\12\4"+
    "\3\2\2\0\1\2\20\0\1\2\1\0\36\2\35\0\3\2\60\0"+
    "\46\2\13\0\1\2\u0152\0\66\2\3\0\1\2\22\0\1\2\7\0"+
    "\12\2\4\0\12\4\25\0\10\2\2\0\2\2\2\0\26\2\1\0"+
    "\7\2\1\0\1\2\3\0\4\2\3\0\1\2\36\0\2\2\1\0"+
    "\3\2\4\0\12\4\2\2\23\0\6\2\4\0\2\2\2\0\26\2"+
    "\1\0\7\2\1\0\2\2\1\0\2\2\1\0\2\2\37\0\4\2"+
    "\1\0\1\2\7\0\12\4\2\0\3\2\20\0\11\2\1\0\3\2"+
    "\1\0\26\2\1\0\7\2\1\0\2\2\1\0\5\2\3\0\1\2"+
    "\22\0\1\2\17\0\2\2\4\0\12\4\25\0\10\2\2\0\2\2"+
    "\2\0\26\2\1\0\7\2\1\0\2\2\1\0\5\2\3\0\1\2"+
    "\36\0\2\2\1\0\3\2\4\0\12\4\1\0\1\2\21\0\1\2"+
    "\1\0\6\2\3\0\3\2\1\0\4\2\3\0\2\2\1\0\1\2"+
    "\1\0\2\2\3\0\2\2\3\0\3\2\3\0\10\2\1\0\3\2"+
    "\55\0\11\4\25\0\10\2\1\0\3\2\1\0\27\2\1\0\12\2"+
    "\1\0\5\2\46\0\2\2\4\0\12\4\25\0\10\2\1\0\3\2"+
    "\1\0\27\2\1\0\12\2\1\0\5\2\3\0\1\2\40\0\1\2"+
    "\1\0\2\2\4\0\12\4\25\0\10\2\1\0\3\2\1\0\27\2"+
    "\1\0\20\2\46\0\2\2\4\0\12\4\25\0\22\2\3\0\30\2"+
    "\1\0\11\2\1\0\1\2\2\0\7\2\72\0\60\2\1\0\2\2"+
    "\14\0\7\2\11\0\12\4\47\0\2\2\1\0\1\2\2\0\2\2"+
    "\1\0\1\2\2\0\1\2\6\0\4\2\1\0\7\2\1\0\3\2"+
    "\1\0\1\2\1\0\1\2\2\0\2\2\1\0\4\2\1\0\2\2"+
    "\11\0\1\2\2\0\5\2\1\0\1\2\11\0\12\4\2\0\2\2"+
    "\42\0\1\2\37\0\12\4\26\0\10\2\1\0\42\2\35\0\4\2"+
    "\164\0\42\2\1\0\5\2\1\0\2\2\25\0\12\4\6\0\6\2"+
    "\112\0\46\2\12\0\51\2\7\0\132\2\5\0\104\2\5\0\122\2"+
    "\6\0\7\2\1\0\77\2\1\0\1\2\1\0\4\2\2\0\7\2"+
    "\1\0\1\2\1\0\4\2\2\0\47\2\1\0\1\2\1\0\4\2"+
    "\2\0\37\2\1\0\1\2\1\0\4\2\2\0\7\2\1\0\1\2"+
    "\1\0\4\2\2\0\7\2\1\0\7\2\1\0\27\2\1\0\37\2"+
    "\1\0\1\2\1\0\4\2\2\0\7\2\1\0\47\2\1\0\23\2"+
    "\16\0\11\4\56\0\125\2\14\0\u026c\2\2\0\10\2\12\0\32\2"+
    "\5\0\113\2\25\0\15\2\1\0\4\2\16\0\22\2\16\0\22\2"+
    "\16\0\15\2\1\0\3\2\17\0\64\2\43\0\1\2\4\0\1\2"+
    "\3\0\12\4\46\0\12\4\6\0\130\2\10\0\51\2\127\0\35\2"+
    "\51\0\12\4\36\2\2\0\5\2\u038b\0\154\2\224\0\234\2\4\0"+
    "\132\2\6\0\26\2\2\0\6\2\2\0\46\2\2\0\6\2\2\0"+
    "\10\2\1\0\1\2\1\0\1\2\1\0\1\2\1\0\37\2\2\0"+
    "\65\2\1\0\7\2\1\0\1\2\3\0\3\2\1\0\7\2\3\0"+
    "\4\2\2\0\6\2\4\0\15\2\5\0\3\2\1\0\7\2\164\0"+
    "\1\2\15\0\1\2\202\0\1\2\4\0\1\2\2\0\12\2\1\0"+
    "\1\2\3\0\5\2\6\0\1\2\1\0\1\2\1\0\1\2\1\0"+
    "\4\2\1\0\3\2\1\0\7\2\3\0\3\2\5\0\5\2\u0ebb\0"+
    "\2\2\52\0\5\2\5\0\2\2\4\0\126\2\6\0\3\2\1\0"+
    "\132\2\1\0\4\2\5\0\50\2\4\0\136\2\21\0\30\2\70\0"+
    "\20\2\u0200\0\u19b6\2\112\0\u51a6\2\132\0\u048d\2\u0773\0\u2ba4\2\u215c\0"+
    "\u012e\2\2\0\73\2\225\0\7\2\14\0\5\2\5\0\1\2\1\0"+
    "\12\2\1\0\15\2\1\0\5\2\1\0\1\2\1\0\2\2\1\0"+
    "\2\2\1\0\154\2\41\0\u016b\2\22\0\100\2\2\0\66\2\50\0"+
    "\14\2\164\0\5\2\1\0\207\2\23\0\12\4\7\0\32\2\6\0"+
    "\32\2\13\0\131\2\3\0\6\2\2\0\6\2\2\0\6\2\2\0"+
    "\3\2\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\1\3\2\1\1\4\1\5\1\6"+
    "\2\7\1\1\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\17\3\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\1\1\36\1\0\1\36\1\37\1\36\2\40"+
    "\3\0\1\41\1\42\3\0\1\43\1\0\1\44\1\45"+
    "\1\46\1\47\1\50\1\0\1\51\1\0\1\52\1\53"+
    "\1\0\7\3\1\54\1\55\3\3\1\56\24\3\1\57"+
    "\1\60\1\61\1\0\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\2\0\1\36"+
    "\1\75\1\76\1\40\2\0\3\77\16\43\1\45\1\100"+
    "\1\101\1\0\1\102\1\103\1\104\17\3\1\105\3\3"+
    "\1\106\16\3\1\107\1\110\1\111\3\0\1\112\1\40"+
    "\1\77\4\43\1\113\16\43\1\0\2\100\1\102\1\3"+
    "\1\114\1\3\1\115\1\116\15\3\1\117\1\120\6\3"+
    "\1\121\1\122\6\3\1\123\2\0\1\124\23\43\1\45"+
    "\1\0\1\125\2\3\1\126\4\3\1\127\3\3\1\130"+
    "\2\3\1\131\1\132\4\3\1\133\1\134\3\3\1\135"+
    "\1\3\1\0\1\136\1\137\3\43\1\140\4\43\1\141"+
    "\10\43\1\142\1\3\1\143\1\3\1\144\1\145\1\3"+
    "\1\146\7\3\1\147\2\3\1\150\1\151\1\152\1\0"+
    "\1\153\3\43\1\154\2\43\1\155\1\156\6\43\1\157"+
    "\2\3\1\160\1\161\1\3\1\162\1\163\1\164\1\165"+
    "\2\3\1\166\1\167\1\43\1\170\5\43\1\171\1\43"+
    "\1\172\2\3\1\173\1\174\1\175\1\176\1\177\5\43"+
    "\1\3\1\200\1\43\1\201\1\43\1\202\1\203\1\204"+
    "\1\205\1\206";

  private static int [] zzUnpackAction() {
    int [] result = new int[418];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\u025b\0\u014f\0\u029e\0\u02e1\0\u0324\0\u0367\0\u03aa"+
    "\0\u03ed\0\u0430\0\u014f\0\u014f\0\u014f\0\u014f\0\u0473\0\u04b6"+
    "\0\u04f9\0\u053c\0\u057f\0\u05c2\0\u0605\0\u0648\0\u068b\0\u06ce"+
    "\0\u0711\0\u0754\0\u0797\0\u07da\0\u081d\0\u014f\0\u014f\0\u014f"+
    "\0\u014f\0\u014f\0\u014f\0\u0860\0\u08a3\0\u08e6\0\u0929\0\u014f"+
    "\0\u096c\0\u09af\0\u09f2\0\u0a35\0\u0a78\0\u0abb\0\u0afe\0\u0b41"+
    "\0\u0b84\0\u014f\0\u0bc7\0\u0c0a\0\u0c4d\0\u0218\0\u025b\0\u03aa"+
    "\0\u014f\0\u014f\0\u0abb\0\u0c90\0\u0cd3\0\u0d16\0\u0d59\0\u0d9c"+
    "\0\u0ddf\0\u014f\0\u014f\0\u0e22\0\u0e65\0\u014f\0\u0ea8\0\u014f"+
    "\0\u014f\0\u0eeb\0\u0f2e\0\u0f71\0\u0fb4\0\u0ff7\0\u103a\0\u107d"+
    "\0\u10c0\0\u1103\0\u01d5\0\u1146\0\u1189\0\u11cc\0\u01d5\0\u120f"+
    "\0\u1252\0\u1295\0\u12d8\0\u131b\0\u135e\0\u13a1\0\u13e4\0\u1427"+
    "\0\u146a\0\u14ad\0\u14f0\0\u1533\0\u1576\0\u15b9\0\u15fc\0\u163f"+
    "\0\u1682\0\u16c5\0\u1708\0\u014f\0\u014f\0\u014f\0\u174b\0\u014f"+
    "\0\u014f\0\u014f\0\u014f\0\u014f\0\u014f\0\u014f\0\u014f\0\u178e"+
    "\0\u014f\0\u014f\0\u17d1\0\u1814\0\u014f\0\u1857\0\u014f\0\u189a"+
    "\0\u18dd\0\u1920\0\u014f\0\u0cd3\0\u0c90\0\u1963\0\u19a6\0\u19e9"+
    "\0\u1a2c\0\u1a6f\0\u1ab2\0\u1af5\0\u1b38\0\u1b7b\0\u1bbe\0\u1c01"+
    "\0\u1c44\0\u1c87\0\u1cca\0\u1d0d\0\u1d50\0\u0e65\0\u1d93\0\u1dd6"+
    "\0\u014f\0\u01d5\0\u1e19\0\u1e5c\0\u1e9f\0\u1ee2\0\u1f25\0\u1f68"+
    "\0\u1fab\0\u1fee\0\u2031\0\u2074\0\u20b7\0\u20fa\0\u213d\0\u2180"+
    "\0\u21c3\0\u01d5\0\u2206\0\u2249\0\u228c\0\u01d5\0\u22cf\0\u2312"+
    "\0\u2355\0\u2398\0\u23db\0\u241e\0\u2461\0\u24a4\0\u24e7\0\u252a"+
    "\0\u256d\0\u25b0\0\u25f3\0\u2636\0\u01d5\0\u014f\0\u014f\0\u2679"+
    "\0\u26bc\0\u26ff\0\u014f\0\u2742\0\u18dd\0\u2785\0\u27c8\0\u280b"+
    "\0\u284e\0\u0d16\0\u2891\0\u28d4\0\u2917\0\u295a\0\u299d\0\u29e0"+
    "\0\u2a23\0\u2a66\0\u2aa9\0\u2aec\0\u2b2f\0\u2b72\0\u2bb5\0\u2bf8"+
    "\0\u2c3b\0\u2c7e\0\u014f\0\u2cc1\0\u2d04\0\u01d5\0\u2d47\0\u01d5"+
    "\0\u01d5\0\u2d8a\0\u2dcd\0\u2e10\0\u2e53\0\u2e96\0\u2ed9\0\u2f1c"+
    "\0\u2f5f\0\u2fa2\0\u2fe5\0\u3028\0\u306b\0\u30ae\0\u01d5\0\u01d5"+
    "\0\u30f1\0\u3134\0\u3177\0\u31ba\0\u31fd\0\u3240\0\u01d5\0\u01d5"+
    "\0\u3283\0\u32c6\0\u3309\0\u334c\0\u338f\0\u33d2\0\u014f\0\u3415"+
    "\0\u3458\0\u0c0a\0\u349b\0\u34de\0\u3521\0\u3564\0\u35a7\0\u35ea"+
    "\0\u362d\0\u3670\0\u36b3\0\u36f6\0\u3739\0\u377c\0\u37bf\0\u3802"+
    "\0\u3845\0\u3888\0\u38cb\0\u390e\0\u3951\0\u014f\0\u3994\0\u01d5"+
    "\0\u39d7\0\u3a1a\0\u01d5\0\u3a5d\0\u3aa0\0\u3ae3\0\u3b26\0\u01d5"+
    "\0\u3b69\0\u3bac\0\u3bef\0\u01d5\0\u3c32\0\u3c75\0\u01d5\0\u01d5"+
    "\0\u3cb8\0\u3cfb\0\u3d3e\0\u3d81\0\u01d5\0\u01d5\0\u3dc4\0\u3e07"+
    "\0\u3e4a\0\u01d5\0\u3e8d\0\u3ed0\0\u3f13\0\u0d16\0\u3f56\0\u3f99"+
    "\0\u3fdc\0\u0d16\0\u401f\0\u4062\0\u40a5\0\u40e8\0\u0d16\0\u412b"+
    "\0\u416e\0\u41b1\0\u41f4\0\u4237\0\u427a\0\u42bd\0\u4300\0\u0d16"+
    "\0\u4343\0\u01d5\0\u4386\0\u01d5\0\u01d5\0\u43c9\0\u01d5\0\u440c"+
    "\0\u444f\0\u4492\0\u44d5\0\u4518\0\u455b\0\u459e\0\u01d5\0\u45e1"+
    "\0\u4624\0\u01d5\0\u01d5\0\u014f\0\u4667\0\u0d16\0\u46aa\0\u46ed"+
    "\0\u4730\0\u0d16\0\u4773\0\u47b6\0\u0d16\0\u0d16\0\u47f9\0\u483c"+
    "\0\u487f\0\u48c2\0\u4905\0\u4948\0\u01d5\0\u498b\0\u49ce\0\u01d5"+
    "\0\u01d5\0\u4a11\0\u01d5\0\u01d5\0\u01d5\0\u01d5\0\u4a54\0\u4a97"+
    "\0\u014f\0\u0d16\0\u4ada\0\u0d16\0\u4b1d\0\u4b60\0\u4ba3\0\u4be6"+
    "\0\u4c29\0\u0d16\0\u4c6c\0\u0d16\0\u4caf\0\u4cf2\0\u01d5\0\u01d5"+
    "\0\u01d5\0\u0d16\0\u0d16\0\u4d35\0\u4d78\0\u4dbb\0\u4dfe\0\u4e41"+
    "\0\u4e84\0\u01d5\0\u4ec7\0\u0d16\0\u4f0a\0\u0d16\0\u0d16\0\u01d5"+
    "\0\u0d16\0\u0d16";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[418];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\2\10\1\11\1\6\1\7\1\10\1\12"+
    "\1\13\1\14\1\15\1\10\2\16\1\17\2\10\1\20"+
    "\2\10\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\2\10\1\35\1\36"+
    "\1\37\1\10\1\40\1\41\1\42\1\10\1\43\1\44"+
    "\1\10\1\45\3\10\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\5\67\1\70\1\67\1\71"+
    "\17\67\1\72\53\67\5\73\1\70\1\73\1\71\20\73"+
    "\1\72\52\73\2\0\2\74\10\0\1\74\3\0\2\74"+
    "\1\0\2\74\6\0\14\74\1\75\12\74\22\0\1\7"+
    "\2\10\1\76\1\0\1\7\1\10\1\77\1\13\1\14"+
    "\1\15\1\10\2\16\1\17\2\10\1\100\2\10\1\21"+
    "\1\22\1\23\1\24\1\101\1\102\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\2\10\1\35\1\36\1\37\1\10"+
    "\1\40\1\41\1\42\1\10\1\43\1\44\1\10\1\45"+
    "\3\10\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\103\104\0\1\7\4\0\1\7\76\0\3\10"+
    "\2\0\1\10\4\0\6\10\1\0\2\10\6\0\27\10"+
    "\25\0\1\76\10\0\3\76\4\0\1\104\1\0\1\105"+
    "\5\0\1\104\50\0\2\106\3\0\1\106\1\0\1\107"+
    "\2\0\1\106\3\0\2\106\1\0\2\106\6\0\27\106"+
    "\33\0\1\110\1\111\56\0\1\112\102\0\1\113\14\0"+
    "\1\76\10\0\3\16\4\0\1\104\1\0\1\105\5\0"+
    "\1\104\52\0\1\76\10\0\1\76\2\114\2\115\2\0"+
    "\1\104\1\0\1\105\5\0\1\104\46\0\12\116\1\117"+
    "\70\116\25\0\1\120\44\0\1\121\14\0\1\105\10\0"+
    "\3\105\6\0\1\122\56\0\3\10\2\0\1\10\4\0"+
    "\6\10\1\0\2\10\6\0\1\10\1\123\10\10\1\124"+
    "\14\10\23\0\3\10\2\0\1\10\4\0\4\10\1\125"+
    "\1\10\1\0\2\10\6\0\1\126\12\10\1\127\13\10"+
    "\23\0\3\10\2\0\1\10\4\0\6\10\1\0\2\10"+
    "\6\0\22\10\1\130\4\10\23\0\3\10\2\0\1\10"+
    "\4\0\6\10\1\0\1\131\1\10\6\0\1\132\10\10"+
    "\1\133\15\10\23\0\3\10\2\0\1\10\4\0\6\10"+
    "\1\0\2\10\6\0\5\10\1\134\21\10\23\0\3\10"+
    "\2\0\1\10\4\0\6\10\1\0\2\10\6\0\1\10"+
    "\1\135\25\10\23\0\3\10\2\0\1\10\4\0\6\10"+
    "\1\0\2\10\6\0\1\10\1\136\16\10\1\137\3\10"+
    "\1\140\2\10\23\0\3\10\2\0\1\10\4\0\6\10"+
    "\1\0\2\10\6\0\6\10\1\141\3\10\1\142\5\10"+
    "\1\143\6\10\23\0\3\10\2\0\1\10\4\0\6\10"+
    "\1\0\2\10\6\0\1\144\20\10\1\145\5\10\23\0"+
    "\3\10\2\0\1\10\4\0\6\10\1\0\2\10\6\0"+
    "\5\10\1\146\14\10\1\147\1\10\1\150\2\10\23\0"+
    "\3\10\2\0\1\10\4\0\6\10\1\0\2\10\6\0"+
    "\5\10\1\151\1\152\3\10\1\153\14\10\23\0\3\10"+
    "\2\0\1\10\4\0\6\10\1\0\2\10\6\0\6\10"+
    "\1\154\4\10\1\155\4\10\1\156\6\10\23\0\3\10"+
    "\2\0\1\10\4\0\6\10\1\0\2\10\6\0\23\10"+
    "\1\157\3\10\23\0\3\10\2\0\1\10\4\0\6\10"+
    "\1\0\2\10\6\0\2\10\1\160\7\10\1\161\1\10"+
    "\1\162\12\10\23\0\3\10\2\0\1\10\4\0\6\10"+
    "\1\0\2\10\6\0\6\10\1\163\20\10\111\0\1\164"+
    "\1\165\1\166\101\0\1\167\1\170\102\0\1\171\102\0"+
    "\1\172\102\0\1\173\2\0\1\174\77\0\1\175\3\0"+
    "\1\176\76\0\1\177\4\0\1\200\75\0\1\201\102\0"+
    "\1\202\44\0\1\203\1\0\1\204\44\0\5\67\1\0"+
    "\1\67\1\0\17\67\1\0\53\67\6\205\1\0\74\205"+
    "\2\0\2\206\10\0\1\206\3\0\2\206\1\0\2\206"+
    "\4\0\1\207\1\0\27\206\21\0\5\73\1\0\1\73"+
    "\1\0\20\73\1\0\52\73\2\0\3\74\7\0\6\74"+
    "\1\0\2\74\6\0\27\74\23\0\3\74\7\0\6\74"+
    "\1\0\2\74\6\0\22\74\1\210\4\74\25\0\1\211"+
    "\10\0\3\211\5\0\1\212\42\0\1\212\12\0\4\213"+
    "\1\214\10\213\3\214\4\213\1\215\1\213\1\0\5\213"+
    "\1\215\46\213\2\0\3\106\2\0\1\106\4\0\6\106"+
    "\1\0\2\106\6\0\27\106\23\0\2\106\3\0\1\106"+
    "\4\0\1\106\3\0\2\106\1\0\1\216\1\106\6\0"+
    "\1\217\3\106\1\220\1\221\1\222\1\223\1\224\1\225"+
    "\3\106\1\226\1\227\1\230\1\231\1\232\1\233\4\106"+
    "\21\0\6\110\1\0\74\110\13\234\1\235\67\234\4\0"+
    "\1\76\10\0\1\76\2\114\4\0\1\104\1\0\1\105"+
    "\5\0\1\104\62\0\4\236\4\0\1\236\7\0\1\236"+
    "\2\0\1\236\1\0\1\236\1\0\2\236\4\0\1\236"+
    "\6\0\1\236\22\0\5\117\1\237\4\117\1\240\70\117"+
    "\26\0\1\241\56\0\3\10\2\0\1\10\4\0\6\10"+
    "\1\0\2\10\6\0\2\10\1\242\20\10\1\243\3\10"+
    "\23\0\3\10\2\0\1\10\4\0\6\10\1\0\2\10"+
    "\6\0\13\10\1\244\13\10\23\0\3\10\2\0\1\10"+
    "\4\0\6\10\1\0\2\10\6\0\14\10\1\245\12\10"+
    "\23\0\3\10\2\0\1\10\4\0\6\10\1\0\2\10"+
    "\6\0\12\10\1\246\14\10\23\0\3\10\2\0\1\10"+
    "\4\0\6\10\1\0\2\10\6\0\21\10\1\247\5\10"+
    "\23\0\3\10\2\0\1\10\4\0\6\10\1\0\2\10"+
    "\6\0\3\10\1\250\23\10\23\0\3\10\2\0\1\10"+
    "\4\0\6\10\1\0\2\10\6\0\15\10\1\251\11\10"+
    "\23\0\3\10\2\0\1\10\4\0\6\10\1\0\2\10"+
    "\6\0\13\10\1\252\1\253\12\10\23\0\3\10\2\0"+
    "\1\10\4\0\6\10\1\0\2\10\6\0\1\10\1\254"+
    "\25\10\23\0\3\10\2\0\1\10\4\0\6\10\1\0"+
    "\2\10\6\0\14\10\1\255\12\10\23\0\3\10\2\0"+
    "\1\10\4\0\6\10\1\0\2\10\6\0\11\10\1\256"+
    "\15\10\23\0\3\10\2\0\1\10\4\0\6\10\1\0"+
    "\2\10\6\0\1\257\26\10\23\0\3\10\2\0\1\10"+
    "\4\0\6\10\1\0\2\10\6\0\13\10\1\260\13\10"+
    "\23\0\3\10\2\0\1\10\4\0\6\10\1\0\2\10"+
    "\6\0\1\261\26\10\23\0\3\10\2\0\1\10\4\0"+
    "\6\10\1\0\2\10\6\0\5\10\1\262\21\10\23\0"+
    "\3\10\2\0\1\10\4\0\6\10\1\0\2\10\6\0"+
    "\14\10\1\263\12\10\23\0\3\10\2\0\1\10\4\0"+
    "\6\10\1\0\2\10\6\0\3\10\1\264\23\10\23\0"+
    "\3\10\2\0\1\10\4\0\6\10\1\0\2\10\6\0"+
    "\12\10\1\265\11\10\1\266\2\10\23\0\3\10\2\0"+
    "\1\10\4\0\6\10\1\0\2\10\6\0\3\10\1\267"+
    "\1\10\1\270\21\10\23\0\3\10\2\0\1\10\4\0"+
    "\6\10\1\0\2\10\6\0\15\10\1\271\11\10\23\0"+
    "\3\10\2\0\1\10\4\0\6\10\1\0\2\10\6\0"+
    "\3\10\1\272\23\10\23\0\3\10\2\0\1\10\4\0"+
    "\6\10\1\0\2\10\6\0\16\10\1\273\10\10\23\0"+
    "\3\10\2\0\1\10\4\0\6\10\1\0\2\10\6\0"+
    "\4\10\1\274\22\10\23\0\3\10\2\0\1\10\4\0"+
    "\6\10\1\0\2\10\6\0\14\10\1\275\4\10\1\276"+
    "\5\10\23\0\3\10\2\0\1\10\4\0\6\10\1\0"+
    "\2\10\6\0\6\10\1\277\20\10\23\0\3\10\2\0"+
    "\1\10\4\0\6\10\1\0\2\10\6\0\1\300\26\10"+
    "\23\0\3\10\2\0\1\10\4\0\6\10\1\0\2\10"+
    "\6\0\1\10\1\301\25\10\23\0\3\10\2\0\1\10"+
    "\4\0\6\10\1\0\2\10\6\0\3\10\1\302\23\10"+
    "\23\0\3\10\2\0\1\10\4\0\6\10\1\0\2\10"+
    "\6\0\15\10\1\303\11\10\23\0\3\10\2\0\1\10"+
    "\4\0\6\10\1\0\2\10\6\0\6\10\1\304\20\10"+
    "\23\0\3\10\2\0\1\10\4\0\6\10\1\0\2\10"+
    "\6\0\5\10\1\305\21\10\113\0\1\306\102\0\1\307"+
    "\43\0\1\310\4\0\1\311\5\0\1\312\100\0\1\313"+
    "\40\0\3\206\7\0\6\206\1\0\2\206\6\0\27\206"+
    "\23\0\3\74\7\0\6\74\1\0\2\74\6\0\3\74"+
    "\1\314\23\74\21\0\4\213\1\315\10\213\3\315\6\213"+
    "\1\0\54\213\4\0\1\211\10\0\3\211\65\0\3\106"+
    "\2\0\1\106\4\0\6\106\1\0\2\106\6\0\1\106"+
    "\1\316\4\106\1\317\20\106\23\0\3\106\2\0\1\106"+
    "\4\0\6\106\1\0\2\106\6\0\6\106\1\320\11\106"+
    "\1\321\1\322\5\106\23\0\3\106\2\0\1\106\4\0"+
    "\6\106\1\0\2\106\6\0\3\106\1\323\6\106\1\324"+
    "\14\106\23\0\3\106\2\0\1\106\4\0\6\106\1\0"+
    "\2\106\6\0\1\106\1\325\25\106\23\0\3\106\2\0"+
    "\1\106\4\0\6\106\1\0\2\106\6\0\12\106\1\326"+
    "\14\106\23\0\3\106\2\0\1\106\4\0\6\106\1\0"+
    "\2\106\6\0\1\106\1\327\25\106\23\0\3\106\2\0"+
    "\1\106\4\0\6\106\1\0\2\106\6\0\1\106\1\330"+
    "\25\106\23\0\3\106\2\0\1\106\4\0\6\106\1\0"+
    "\2\106\6\0\3\106\1\331\2\106\1\332\20\106\23\0"+
    "\3\106\2\0\1\106\4\0\6\106\1\0\2\106\6\0"+
    "\5\106\1\333\21\106\23\0\3\106\2\0\1\106\4\0"+
    "\6\106\1\0\2\106\6\0\20\106\1\334\6\106\23\0"+
    "\3\106\2\0\1\106\4\0\6\106\1\0\2\106\6\0"+
    "\1\106\1\335\25\106\23\0\3\106\2\0\1\106\4\0"+
    "\6\106\1\0\2\106\6\0\23\106\1\336\3\106\23\0"+
    "\3\106\2\0\1\106\4\0\6\106\1\0\2\106\6\0"+
    "\1\106\1\337\25\106\23\0\3\106\2\0\1\106\4\0"+
    "\6\106\1\0\2\106\6\0\6\106\1\340\20\106\21\0"+
    "\13\234\1\341\67\234\12\342\1\343\1\235\67\342\5\117"+
    "\1\237\4\117\1\344\70\117\23\0\1\240\12\0\1\240"+
    "\6\0\1\240\4\0\1\240\1\0\1\240\30\0\3\10"+
    "\2\0\1\10\4\0\6\10\1\0\2\10\6\0\1\10"+
    "\1\345\25\10\23\0\3\10\2\0\1\10\4\0\6\10"+
    "\1\0\2\10\6\0\13\10\1\346\13\10\23\0\3\10"+
    "\2\0\1\10\4\0\6\10\1\0\2\10\6\0\1\10"+
    "\1\347\25\10\23\0\3\10\2\0\1\10\4\0\6\10"+
    "\1\0\1\350\1\10\6\0\27\10\23\0\3\10\2\0"+
    "\1\10\4\0\6\10\1\0\2\10\6\0\1\10\1\351"+
    "\25\10\23\0\3\10\2\0\1\10\4\0\6\10\1\0"+
    "\2\10\6\0\13\10\1\352\13\10\23\0\3\10\2\0"+
    "\1\10\4\0\6\10\1\0\2\10\6\0\13\10\1\353"+
    "\4\10\1\354\6\10\23\0\3\10\2\0\1\10\4\0"+
    "\6\10\1\0\2\10\6\0\3\10\1\355\23\10\23\0"+
    "\3\10\2\0\1\10\4\0\6\10\1\0\2\10\6\0"+
    "\1\10\1\356\25\10\23\0\3\10\2\0\1\10\4\0"+
    "\6\10\1\0\2\10\6\0\6\10\1\357\20\10\23\0"+
    "\3\10\2\0\1\10\4\0\6\10\1\0\2\10\6\0"+
    "\12\10\1\360\14\10\23\0\3\10\2\0\1\10\4\0"+
    "\6\10\1\0\2\10\6\0\6\10\1\361\20\10\23\0"+
    "\3\10\2\0\1\10\4\0\6\10\1\0\2\10\6\0"+
    "\6\10\1\362\20\10\23\0\3\10\2\0\1\10\4\0"+
    "\6\10\1\0\2\10\6\0\21\10\1\363\5\10\23\0"+
    "\3\10\2\0\1\10\4\0\6\10\1\0\2\10\6\0"+
    "\16\10\1\364\10\10\23\0\3\10\2\0\1\10\4\0"+
    "\6\10\1\0\2\10\6\0\24\10\1\365\2\10\23\0"+
    "\3\10\2\0\1\10\4\0\6\10\1\0\2\10\6\0"+
    "\1\366\26\10\23\0\3\10\2\0\1\10\4\0\6\10"+
    "\1\0\2\10\6\0\1\10\1\367\25\10\23\0\3\10"+
    "\2\0\1\10\4\0\6\10\1\0\2\10\6\0\21\10"+
    "\1\370\5\10\23\0\3\10\2\0\1\10\4\0\6\10"+
    "\1\0\2\10\6\0\20\10\1\371\6\10\23\0\3\10"+
    "\2\0\1\10\4\0\6\10\1\0\2\10\6\0\1\10"+
    "\1\372\25\10\23\0\3\10\2\0\1\10\4\0\6\10"+
    "\1\0\2\10\6\0\23\10\1\373\3\10\23\0\3\10"+
    "\2\0\1\10\4\0\6\10\1\0\2\10\6\0\7\10"+
    "\1\374\17\10\23\0\3\10\2\0\1\10\4\0\6\10"+
    "\1\0\2\10\6\0\13\10\1\375\13\10\23\0\3\10"+
    "\2\0\1\10\4\0\6\10\1\0\2\10\6\0\16\10"+
    "\1\376\10\10\23\0\3\10\2\0\1\10\4\0\6\10"+
    "\1\0\2\10\6\0\1\10\1\377\12\10\1\u0100\12\10"+
    "\23\0\3\10\2\0\1\10\4\0\6\10\1\0\2\10"+
    "\6\0\21\10\1\u0101\5\10\23\0\3\10\2\0\1\10"+
    "\4\0\6\10\1\0\2\10\6\0\14\10\1\u0102\12\10"+
    "\23\0\3\10\2\0\1\10\4\0\6\10\1\0\2\10"+
    "\6\0\5\10\1\u0103\21\10\23\0\3\10\2\0\1\10"+
    "\4\0\6\10\1\0\2\10\6\0\14\10\1\u0104\12\10"+
    "\23\0\3\10\2\0\1\10\4\0\6\10\1\0\2\10"+
    "\6\0\1\10\1\u0105\25\10\23\0\3\10\2\0\1\10"+
    "\4\0\6\10\1\0\2\10\6\0\14\10\1\u0106\12\10"+
    "\64\0\1\u0107\77\0\1\u0108\116\0\1\u0109\30\0\3\74"+
    "\7\0\6\74\1\0\2\74\6\0\21\74\1\u010a\5\74"+
    "\23\0\3\106\2\0\1\106\4\0\6\106\1\0\2\106"+
    "\6\0\14\106\1\u010b\12\106\23\0\3\106\2\0\1\106"+
    "\4\0\6\106\1\0\2\106\6\0\16\106\1\u010c\10\106"+
    "\23\0\3\106\2\0\1\106\4\0\6\106\1\0\2\106"+
    "\6\0\14\106\1\u010d\12\106\23\0\3\106\2\0\1\106"+
    "\4\0\6\106\1\0\2\106\6\0\10\106\1\u010e\16\106"+
    "\23\0\3\106\2\0\1\106\4\0\6\106\1\0\2\106"+
    "\6\0\1\u010f\13\106\1\u0110\12\106\23\0\3\106\2\0"+
    "\1\106\4\0\6\106\1\0\2\106\6\0\3\106\1\u0111"+
    "\23\106\23\0\3\106\2\0\1\106\4\0\6\106\1\0"+
    "\2\106\6\0\26\106\1\u0112\23\0\3\106\2\0\1\106"+
    "\4\0\6\106\1\0\2\106\6\0\14\106\1\u0113\12\106"+
    "\23\0\3\106\2\0\1\106\4\0\6\106\1\0\2\106"+
    "\6\0\1\106\1\u0114\25\106\23\0\3\106\2\0\1\106"+
    "\4\0\6\106\1\0\2\106\6\0\4\106\1\u0115\22\106"+
    "\23\0\3\106\2\0\1\106\4\0\6\106\1\0\2\106"+
    "\6\0\1\u0116\26\106\23\0\3\106\2\0\1\106\4\0"+
    "\6\106\1\0\2\106\6\0\7\106\1\u0117\17\106\23\0"+
    "\3\106\2\0\1\106\4\0\6\106\1\0\2\106\6\0"+
    "\20\106\1\u0118\6\106\23\0\3\106\2\0\1\106\4\0"+
    "\6\106\1\0\2\106\6\0\5\106\1\u0119\21\106\23\0"+
    "\3\106\2\0\1\106\4\0\6\106\1\0\2\106\6\0"+
    "\14\106\1\u011a\12\106\23\0\3\106\2\0\1\106\4\0"+
    "\6\106\1\0\2\106\6\0\1\106\1\u011b\25\106\23\0"+
    "\3\106\2\0\1\106\4\0\6\106\1\0\2\106\6\0"+
    "\14\106\1\u011c\12\106\23\0\3\106\2\0\1\106\4\0"+
    "\6\106\1\0\2\106\6\0\16\106\1\u011d\10\106\21\0"+
    "\12\234\1\u011e\1\341\67\234\13\342\1\u011f\67\342\5\117"+
    "\1\237\4\117\1\240\10\117\1\344\12\117\1\344\6\117"+
    "\1\344\4\117\1\344\1\117\1\344\26\117\2\0\3\10"+
    "\2\0\1\10\4\0\6\10\1\0\2\10\6\0\5\10"+
    "\1\u0120\21\10\23\0\3\10\2\0\1\10\4\0\6\10"+
    "\1\0\2\10\6\0\1\u0121\4\10\1\u0122\21\10\23\0"+
    "\3\10\2\0\1\10\4\0\6\10\1\0\2\10\6\0"+
    "\1\10\1\u0123\25\10\23\0\3\10\2\0\1\10\4\0"+
    "\6\10\1\0\2\10\6\0\1\10\1\u0124\25\10\23\0"+
    "\3\10\2\0\1\10\4\0\6\10\1\0\2\10\6\0"+
    "\5\10\1\u0125\21\10\23\0\3\10\2\0\1\10\4\0"+
    "\6\10\1\0\2\10\6\0\1\u0126\26\10\23\0\3\10"+
    "\2\0\1\10\4\0\6\10\1\0\2\10\6\0\5\10"+
    "\1\u0127\21\10\23\0\3\10\2\0\1\10\4\0\6\10"+
    "\1\0\2\10\6\0\7\10\1\u0128\17\10\23\0\3\10"+
    "\2\0\1\10\4\0\6\10\1\0\2\10\6\0\5\10"+
    "\1\u0129\21\10\23\0\3\10\2\0\1\10\4\0\6\10"+
    "\1\0\2\10\6\0\12\10\1\u012a\14\10\23\0\3\10"+
    "\2\0\1\10\4\0\6\10\1\0\1\u012b\1\10\6\0"+
    "\27\10\23\0\3\10\2\0\1\10\4\0\6\10\1\0"+
    "\2\10\6\0\1\10\1\u012c\25\10\23\0\3\10\2\0"+
    "\1\10\4\0\6\10\1\0\2\10\6\0\14\10\1\u012d"+
    "\12\10\23\0\3\10\2\0\1\10\4\0\6\10\1\0"+
    "\2\10\6\0\15\10\1\u012e\11\10\23\0\3\10\2\0"+
    "\1\10\4\0\6\10\1\0\2\10\6\0\17\10\1\u012f"+
    "\7\10\23\0\3\10\2\0\1\10\4\0\6\10\1\0"+
    "\2\10\6\0\2\10\1\u0130\24\10\23\0\3\10\2\0"+
    "\1\10\4\0\6\10\1\0\2\10\6\0\10\10\1\u0131"+
    "\16\10\23\0\3\10\2\0\1\10\4\0\6\10\1\0"+
    "\2\10\6\0\6\10\1\u0132\20\10\23\0\3\10\2\0"+
    "\1\10\4\0\6\10\1\0\2\10\6\0\6\10\1\u0133"+
    "\20\10\23\0\3\10\2\0\1\10\4\0\6\10\1\0"+
    "\2\10\6\0\3\10\1\u0134\23\10\23\0\3\10\2\0"+
    "\1\10\4\0\6\10\1\0\2\10\6\0\22\10\1\u0135"+
    "\4\10\23\0\3\10\2\0\1\10\4\0\6\10\1\0"+
    "\2\10\6\0\21\10\1\u0136\5\10\23\0\3\10\2\0"+
    "\1\10\4\0\6\10\1\0\2\10\6\0\3\10\1\u0137"+
    "\23\10\23\0\3\10\2\0\1\10\4\0\6\10\1\0"+
    "\2\10\6\0\5\10\1\u0138\21\10\23\0\3\10\2\0"+
    "\1\10\4\0\6\10\1\0\2\10\6\0\16\10\1\u0139"+
    "\10\10\23\0\3\10\2\0\1\10\4\0\6\10\1\0"+
    "\2\10\6\0\5\10\1\u013a\21\10\23\0\3\10\2\0"+
    "\1\10\4\0\6\10\1\0\2\10\6\0\3\10\1\u013b"+
    "\23\10\74\0\1\u013c\63\0\1\u013d\50\0\3\106\2\0"+
    "\1\106\4\0\6\106\1\0\2\106\6\0\6\106\1\u013e"+
    "\20\106\23\0\3\106\2\0\1\106\4\0\6\106\1\0"+
    "\2\106\6\0\5\106\1\u013f\21\106\23\0\3\106\2\0"+
    "\1\106\4\0\6\106\1\0\2\106\6\0\3\106\1\u0140"+
    "\23\106\23\0\3\106\2\0\1\106\4\0\6\106\1\0"+
    "\2\106\6\0\1\106\1\u0141\25\106\23\0\3\106\2\0"+
    "\1\106\4\0\6\106\1\0\2\106\6\0\10\106\1\u0142"+
    "\16\106\23\0\3\106\2\0\1\106\4\0\6\106\1\0"+
    "\1\u0143\1\106\6\0\27\106\23\0\3\106\2\0\1\106"+
    "\4\0\6\106\1\0\2\106\6\0\13\106\1\u0144\13\106"+
    "\23\0\3\106\2\0\1\106\4\0\6\106\1\0\2\106"+
    "\6\0\12\106\1\u0145\14\106\23\0\3\106\2\0\1\106"+
    "\4\0\6\106\1\0\2\106\6\0\20\106\1\u0146\6\106"+
    "\23\0\3\106\2\0\1\106\4\0\6\106\1\0\2\106"+
    "\6\0\15\106\1\u0147\11\106\23\0\3\106\2\0\1\106"+
    "\4\0\6\106\1\0\2\106\6\0\12\106\1\u0148\14\106"+
    "\23\0\3\106\2\0\1\106\4\0\6\106\1\0\2\106"+
    "\6\0\6\106\1\u0149\20\106\23\0\3\106\2\0\1\106"+
    "\4\0\6\106\1\0\2\106\6\0\1\106\1\u014a\25\106"+
    "\23\0\3\106\2\0\1\106\4\0\6\106\1\0\2\106"+
    "\6\0\14\106\1\u014b\12\106\23\0\3\106\2\0\1\106"+
    "\4\0\6\106\1\0\2\106\6\0\1\106\1\u014c\25\106"+
    "\23\0\3\106\2\0\1\106\4\0\6\106\1\0\2\106"+
    "\6\0\14\106\1\u014d\12\106\23\0\3\106\2\0\1\106"+
    "\4\0\6\106\1\0\2\106\6\0\5\106\1\u014e\21\106"+
    "\23\0\3\106\2\0\1\106\4\0\6\106\1\0\2\106"+
    "\6\0\14\106\1\u014f\12\106\23\0\3\106\2\0\1\106"+
    "\4\0\6\106\1\0\2\106\6\0\7\106\1\u0150\17\106"+
    "\21\0\12\342\1\343\1\u011f\67\342\2\0\3\10\2\0"+
    "\1\10\4\0\6\10\1\0\2\10\6\0\10\10\1\u0151"+
    "\16\10\23\0\3\10\2\0\1\10\4\0\6\10\1\0"+
    "\2\10\6\0\1\u0152\26\10\23\0\3\10\2\0\1\10"+
    "\4\0\6\10\1\0\1\u0153\1\10\6\0\27\10\23\0"+
    "\3\10\2\0\1\10\4\0\6\10\1\0\2\10\6\0"+
    "\14\10\1\u0154\12\10\23\0\3\10\2\0\1\10\4\0"+
    "\6\10\1\0\2\10\6\0\1\10\1\u0155\25\10\23\0"+
    "\3\10\2\0\1\10\4\0\6\10\1\0\2\10\6\0"+
    "\11\10\1\u0156\15\10\23\0\3\10\2\0\1\10\4\0"+
    "\6\10\1\0\2\10\6\0\1\u0157\26\10\23\0\3\10"+
    "\2\0\1\10\4\0\6\10\1\0\2\10\6\0\13\10"+
    "\1\u0158\13\10\23\0\3\10\2\0\1\10\4\0\6\10"+
    "\1\0\2\10\6\0\3\10\1\u0159\23\10\23\0\3\10"+
    "\2\0\1\10\4\0\6\10\1\0\2\10\6\0\3\10"+
    "\1\u015a\23\10\23\0\3\10\2\0\1\10\4\0\6\10"+
    "\1\0\2\10\6\0\1\10\1\u015b\25\10\23\0\3\10"+
    "\2\0\1\10\4\0\6\10\1\0\2\10\6\0\1\10"+
    "\1\u015c\25\10\23\0\3\10\2\0\1\10\4\0\6\10"+
    "\1\0\2\10\6\0\14\10\1\u015d\12\10\23\0\3\10"+
    "\2\0\1\10\4\0\6\10\1\0\2\10\6\0\17\10"+
    "\1\u015e\7\10\23\0\3\10\2\0\1\10\4\0\6\10"+
    "\1\0\2\10\6\0\16\10\1\u015f\10\10\23\0\3\10"+
    "\2\0\1\10\4\0\6\10\1\0\2\10\6\0\1\u0160"+
    "\26\10\23\0\3\10\2\0\1\10\4\0\6\10\1\0"+
    "\2\10\6\0\3\10\1\u0161\23\10\23\0\3\10\2\0"+
    "\1\10\4\0\6\10\1\0\2\10\6\0\22\10\1\u0162"+
    "\4\10\23\0\3\10\2\0\1\10\4\0\6\10\1\0"+
    "\2\10\6\0\16\10\1\u0163\10\10\61\0\1\u0164\100\0"+
    "\1\u0165\46\0\3\106\2\0\1\106\4\0\6\106\1\0"+
    "\2\106\6\0\20\106\1\u0166\6\106\23\0\3\106\2\0"+
    "\1\106\4\0\6\106\1\0\2\106\6\0\23\106\1\u0167"+
    "\3\106\23\0\3\106\2\0\1\106\4\0\6\106\1\0"+
    "\2\106\6\0\4\106\1\u0168\22\106\23\0\3\106\2\0"+
    "\1\106\4\0\6\106\1\0\2\106\6\0\6\106\1\u0169"+
    "\20\106\23\0\3\106\2\0\1\106\4\0\6\106\1\0"+
    "\2\106\6\0\10\106\1\u016a\16\106\23\0\3\106\2\0"+
    "\1\106\4\0\6\106\1\0\2\106\6\0\3\106\1\u016b"+
    "\23\106\23\0\3\106\2\0\1\106\4\0\6\106\1\0"+
    "\2\106\6\0\25\106\1\u016c\1\106\23\0\3\106\2\0"+
    "\1\106\4\0\6\106\1\0\2\106\6\0\17\106\1\u016d"+
    "\7\106\23\0\3\106\2\0\1\106\4\0\6\106\1\0"+
    "\2\106\6\0\13\106\1\u016e\13\106\23\0\3\106\2\0"+
    "\1\106\4\0\6\106\1\0\1\106\1\u016f\6\0\27\106"+
    "\23\0\3\106\2\0\1\106\4\0\6\106\1\0\2\106"+
    "\6\0\1\106\1\u0170\25\106\23\0\1\106\1\u0171\1\106"+
    "\2\0\1\106\4\0\6\106\1\0\2\106\6\0\27\106"+
    "\23\0\3\106\2\0\1\106\4\0\6\106\1\0\2\106"+
    "\6\0\1\106\1\u0172\25\106\23\0\3\106\2\0\1\106"+
    "\4\0\6\106\1\0\2\106\6\0\13\106\1\u0173\13\106"+
    "\23\0\3\106\2\0\1\106\4\0\6\106\1\0\2\106"+
    "\6\0\1\106\1\u0174\25\106\23\0\3\10\2\0\1\10"+
    "\4\0\6\10\1\0\2\10\6\0\21\10\1\u0175\5\10"+
    "\23\0\3\10\2\0\1\10\4\0\6\10\1\0\2\10"+
    "\6\0\1\10\1\u0176\25\10\23\0\3\10\2\0\1\10"+
    "\4\0\6\10\1\0\2\10\6\0\6\10\1\u0177\20\10"+
    "\23\0\3\10\2\0\1\10\4\0\6\10\1\0\2\10"+
    "\6\0\14\10\1\u0178\12\10\23\0\3\10\2\0\1\10"+
    "\4\0\6\10\1\0\2\10\6\0\16\10\1\u0179\10\10"+
    "\23\0\3\10\2\0\1\10\4\0\6\10\1\0\2\10"+
    "\6\0\20\10\1\u017a\6\10\23\0\3\10\2\0\1\10"+
    "\4\0\6\10\1\0\2\10\6\0\10\10\1\u017b\16\10"+
    "\23\0\3\10\2\0\1\10\4\0\6\10\1\0\2\10"+
    "\6\0\11\10\1\u017c\15\10\23\0\3\10\2\0\1\10"+
    "\4\0\6\10\1\0\2\10\6\0\1\10\1\u017d\25\10"+
    "\23\0\3\10\2\0\1\10\4\0\6\10\1\0\2\10"+
    "\6\0\1\10\1\u017e\25\10\23\0\3\10\2\0\1\10"+
    "\4\0\6\10\1\0\2\10\6\0\12\10\1\u017f\14\10"+
    "\23\0\3\10\2\0\1\10\4\0\6\10\1\0\2\10"+
    "\6\0\10\10\1\u0180\16\10\65\0\1\u0181\40\0\3\106"+
    "\2\0\1\106\4\0\6\106\1\0\2\106\6\0\1\106"+
    "\1\u0182\25\106\23\0\3\106\2\0\1\106\4\0\6\106"+
    "\1\0\2\106\6\0\12\106\1\u0183\14\106\23\0\3\106"+
    "\2\0\1\106\4\0\6\106\1\0\2\106\6\0\15\106"+
    "\1\u0184\11\106\23\0\3\106\2\0\1\106\4\0\6\106"+
    "\1\0\2\106\6\0\5\106\1\u0185\21\106\23\0\3\106"+
    "\2\0\1\106\4\0\6\106\1\0\2\106\6\0\12\106"+
    "\1\u0186\14\106\23\0\3\106\2\0\1\106\4\0\6\106"+
    "\1\0\2\106\6\0\1\u0187\26\106\23\0\3\106\2\0"+
    "\1\106\4\0\6\106\1\0\2\106\6\0\16\106\1\u0188"+
    "\10\106\23\0\3\106\2\0\1\106\4\0\6\106\1\0"+
    "\2\106\6\0\6\106\1\u0189\20\106\23\0\3\106\2\0"+
    "\1\106\4\0\6\106\1\0\2\106\6\0\5\106\1\u018a"+
    "\21\106\23\0\3\106\2\0\1\106\4\0\6\106\1\0"+
    "\2\106\6\0\20\106\1\u018b\6\106\23\0\3\106\2\0"+
    "\1\106\4\0\6\106\1\0\2\106\6\0\5\106\1\u018c"+
    "\21\106\23\0\3\10\2\0\1\10\4\0\6\10\1\0"+
    "\2\10\6\0\1\u018d\26\10\23\0\3\10\2\0\1\10"+
    "\4\0\6\10\1\0\2\10\6\0\16\10\1\u018e\10\10"+
    "\23\0\3\10\2\0\1\10\4\0\6\10\1\0\2\10"+
    "\6\0\1\u018f\26\10\23\0\3\10\2\0\1\10\4\0"+
    "\6\10\1\0\2\10\6\0\1\10\1\u0190\25\10\23\0"+
    "\3\10\2\0\1\10\4\0\6\10\1\0\2\10\6\0"+
    "\1\10\1\u0191\25\10\23\0\3\106\2\0\1\106\4\0"+
    "\6\106\1\0\2\106\6\0\17\106\1\u0192\7\106\23\0"+
    "\3\106\2\0\1\106\4\0\6\106\1\0\2\106\6\0"+
    "\1\106\1\u0193\25\106\23\0\3\106\2\0\1\106\4\0"+
    "\6\106\1\0\2\106\6\0\3\106\1\u0194\23\106\23\0"+
    "\3\106\2\0\1\106\4\0\6\106\1\0\2\106\6\0"+
    "\12\106\1\u0195\14\106\23\0\3\106\2\0\1\106\4\0"+
    "\6\106\1\0\2\106\6\0\14\106\1\u0196\12\106\23\0"+
    "\3\106\2\0\1\106\4\0\6\106\1\0\2\106\6\0"+
    "\15\106\1\u0197\11\106\23\0\3\106\2\0\1\106\4\0"+
    "\6\106\1\0\2\106\6\0\6\106\1\u0198\20\106\23\0"+
    "\3\10\2\0\1\10\4\0\6\10\1\0\2\10\6\0"+
    "\14\10\1\u0199\12\10\23\0\3\10\2\0\1\10\4\0"+
    "\6\10\1\0\2\10\6\0\1\10\1\u019a\25\10\23\0"+
    "\3\106\2\0\1\106\4\0\6\106\1\0\2\106\6\0"+
    "\13\106\1\u019b\13\106\23\0\3\106\2\0\1\106\4\0"+
    "\6\106\1\0\1\u019c\1\106\6\0\27\106\23\0\3\106"+
    "\2\0\1\106\4\0\6\106\1\0\2\106\6\0\1\106"+
    "\1\u019d\25\106\23\0\3\106\2\0\1\106\4\0\6\106"+
    "\1\0\2\106\6\0\3\106\1\u019e\23\106\23\0\3\106"+
    "\2\0\1\106\4\0\6\106\1\0\2\106\6\0\10\106"+
    "\1\u019f\16\106\23\0\3\10\2\0\1\10\4\0\6\10"+
    "\1\0\2\10\6\0\21\10\1\u01a0\5\10\23\0\3\106"+
    "\2\0\1\106\4\0\6\106\1\0\2\106\6\0\10\106"+
    "\1\u01a1\16\106\23\0\3\106\2\0\1\106\4\0\6\106"+
    "\1\0\2\106\6\0\10\106\1\u01a2\16\106\21\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20301];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\4\1\1\11\7\1\4\11\17\1\6\11"+
    "\4\1\1\11\7\1\1\0\1\1\1\11\3\1\3\0"+
    "\2\11\3\0\1\1\1\0\2\1\2\11\1\1\1\0"+
    "\1\11\1\0\2\11\1\0\41\1\3\11\1\0\10\11"+
    "\1\1\2\11\2\0\1\11\1\1\1\11\1\1\2\0"+
    "\1\11\23\1\1\0\1\1\1\11\44\1\2\11\3\0"+
    "\1\11\25\1\1\0\1\1\1\11\43\1\1\11\2\0"+
    "\24\1\1\11\1\0\34\1\1\0\47\1\1\11\1\0"+
    "\33\1\1\11\41\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[418];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private static final class State {
        final int lBraceCount;
        final int state;

        public State(int state, int lBraceCount) {
            this.state = state;
            this.lBraceCount = lBraceCount;
        }

        @Override
        public String toString() {
            return "yystate = " + state + (lBraceCount == 0 ? "" : "lBraceCount = " + lBraceCount);
        }
    }

    private final Stack<State> states = new Stack<State>();
    private int lBraceCount;

    private int commentStart;
    private int commentDepth;

    private void pushState(int state) {
        states.push(new State(yystate(), lBraceCount));
        lBraceCount = 0;
        yybegin(state);
    }

    private void popState() {
        State state = states.pop();
        lBraceCount = state.lBraceCount;
        yybegin(state.state);
    }

    public _HaxeLexer() {
      this((java.io.Reader)null);
    }


  public _HaxeLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _HaxeLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1324) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 122: 
          { return KSETTER;
          }
        case 135: break;
        case 45: 
          { return KIF ;
          }
        case 136: break;
        case 20: 
          { return OMINUS;
          }
        case 137: break;
        case 41: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { return OCOMPLEMENT;
          }
        case 138: break;
        case 104: 
          { return KSWITCH ;
          }
        case 139: break;
        case 37: 
          { return MML_COMMENT;
          }
        case 140: break;
        case 26: 
          { return OBIT_AND;
          }
        case 141: break;
        case 24: 
          { return OQUEST;
          }
        case 142: break;
        case 5: 
          { return OQUOTIENT;
          }
        case 143: break;
        case 125: 
          { return KOVERRIDE;
          }
        case 144: break;
        case 82: 
          { return( KCAST );
          }
        case 145: break;
        case 134: 
          { return KPROTECTED;
          }
        case 146: break;
        case 54: 
          { return OCOND_OR;
          }
        case 147: break;
        case 90: 
          { return KTHROW ;
          }
        case 148: break;
        case 79: 
          { return KTRUE ;
          }
        case 149: break;
        case 3: 
          { return ID;
          }
        case 150: break;
        case 121: 
          { return KGETTER;
          }
        case 151: break;
        case 53: 
          { return OBIT_OR_ASSIGN;
          }
        case 152: break;
        case 38: 
          { return OQUOTIENT_ASSIGN;
          }
        case 153: break;
        case 58: 
          { return OSHIFT_LEFT;
          }
        case 154: break;
        case 100: 
          { return KIMPORT ;
          }
        case 155: break;
        case 76: 
          { return KNULL ;
          }
        case 156: break;
        case 111: 
          { return( KEXTENDS );
          }
        case 157: break;
        case 77: 
          { return( KENUM );
          }
        case 158: break;
        case 15: 
          { return PRBRACK;
          }
        case 159: break;
        case 48: 
          { return OARROW;
          }
        case 160: break;
        case 1: 
          { yybegin(YYINITIAL); return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 161: break;
        case 14: 
          { return PLBRACK;
          }
        case 162: break;
        case 61: 
          { pushState(SHORT_TEMPLATE_ENTRY);
                                                                  yypushback(yylength() - 1);
                                                                  return SHORT_TEMPLATE_ENTRY_START;
          }
        case 163: break;
        case 91: 
          { return KCATCH;
          }
        case 164: break;
        case 62: 
          { pushState(LONG_TEMPLATE_ENTRY); return LONG_TEMPLATE_ENTRY_START;
          }
        case 165: break;
        case 101: 
          { return KINLINE;
          }
        case 166: break;
        case 130: 
          { return KCOREAPI;
          }
        case 167: break;
        case 117: 
          { return( KPACKAGE );
          }
        case 168: break;
        case 105: 
          { return KSTATIC;
          }
        case 169: break;
        case 80: 
          { return KTHIS ;
          }
        case 170: break;
        case 132: 
          { return( KIMPLEMENTS );
          }
        case 171: break;
        case 98: 
          { return KHACK;
          }
        case 172: break;
        case 2: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 173: break;
        case 35: 
          { return MACRO_ID;
          }
        case 174: break;
        case 128: 
          { return( KINTERFACE );
          }
        case 175: break;
        case 43: 
          { return OPLUS_ASSIGN;
          }
        case 176: break;
        case 66: 
          { return REG_EXP;
          }
        case 177: break;
        case 28: 
          { return OBIT_XOR;
          }
        case 178: break;
        case 42: 
          { return OPLUS_PLUS;
          }
        case 179: break;
        case 126: 
          { return KNODEBUG;
          }
        case 180: break;
        case 99: 
          { return KEXTERN;
          }
        case 181: break;
        case 60: 
          { return OREMAINDER_ASSIGN;
          }
        case 182: break;
        case 88: 
          { return KFALSE ;
          }
        case 183: break;
        case 108: 
          { return KBUILD;
          }
        case 184: break;
        case 40: 
          { return LITOCT;
          }
        case 185: break;
        case 4: 
          { return OCOLON;
          }
        case 186: break;
        case 73: 
          { return OSHIFT_LEFT_ASSIGN;
          }
        case 187: break;
        case 94: 
          { return PPELSE;
          }
        case 188: break;
        case 57: 
          { return OLESS_OR_EQUAL;
          }
        case 189: break;
        case 36: 
          { return MSL_COMMENT;
          }
        case 190: break;
        case 71: 
          { return KVAR;
          }
        case 191: break;
        case 96: 
          { return KBIND;
          }
        case 192: break;
        case 9: 
          { return ODOT;
          }
        case 193: break;
        case 49: 
          { return OMINUS_ASSIGN;
          }
        case 194: break;
        case 110: 
          { return KFINAL;
          }
        case 195: break;
        case 83: 
          { return PPEND;
          }
        case 196: break;
        case 27: 
          { return OLESS;
          }
        case 197: break;
        case 65: 
          { return LITHEX;
          }
        case 198: break;
        case 63: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { return LITFLOAT;
          }
        case 199: break;
        case 102: 
          { return KRETURN ;
          }
        case 200: break;
        case 17: 
          { return PRPAREN;
          }
        case 201: break;
        case 68: 
          { return ONEW;
          }
        case 202: break;
        case 47: 
          { return OMINUS_MINUS;
          }
        case 203: break;
        case 16: 
          { return PLPAREN;
          }
        case 204: break;
        case 133: 
          { return KAUTOBUILD;
          }
        case 205: break;
        case 103: 
          { return KPUBLIC;
          }
        case 206: break;
        case 32: 
          { popState(); return ID;
          }
        case 207: break;
        case 95: 
          { return KMETA;
          }
        case 208: break;
        case 69: 
          { return KFOR ;
          }
        case 209: break;
        case 25: 
          { return OBIT_OR;
          }
        case 210: break;
        case 119: 
          { return KNATIVE;
          }
        case 211: break;
        case 113: 
          { return KDYNAMIC;
          }
        case 212: break;
        case 112: 
          { return( KDEFAULT );
          }
        case 213: break;
        case 21: 
          { return OGREATER;
          }
        case 214: break;
        case 85: 
          { return KNEVER;
          }
        case 215: break;
        case 19: 
          { return OCOMMA;
          }
        case 216: break;
        case 123: 
          { return( KFUNCTION );
          }
        case 217: break;
        case 93: 
          { return KSUPER ;
          }
        case 218: break;
        case 31: 
          { popState(); return CLOSING_QUOTE;
          }
        case 219: break;
        case 51: 
          { return OEQ;
          }
        case 220: break;
        case 46: 
          { return KDO ;
          }
        case 221: break;
        case 131: 
          { return KOVERLOAD;
          }
        case 222: break;
        case 127: 
          { return KREQUIRE;
          }
        case 223: break;
        case 116: 
          { return KPRIVATE;
          }
        case 224: break;
        case 72: 
          { return OSHIFT_RIGHT_ASSIGN;
          }
        case 225: break;
        case 34: 
          { if (lBraceCount == 0) {
                                                popState();
                                                return LONG_TEMPLATE_ENTRY_END;
                                              }
                                              lBraceCount--;
                                              return PRCURLY;
          }
        case 226: break;
        case 23: 
          { return ONOT;
          }
        case 227: break;
        case 13: 
          { return PRCURLY;
          }
        case 228: break;
        case 70: 
          { return KTRY;
          }
        case 229: break;
        case 30: 
          { return REGULAR_STRING_PART;
          }
        case 230: break;
        case 118: 
          { return PPELSEIF;
          }
        case 231: break;
        case 84: 
          { popState(); return KTHIS;
          }
        case 232: break;
        case 81: 
          { return( KCASE );
          }
        case 233: break;
        case 12: 
          { return PLCURLY;
          }
        case 234: break;
        case 92: 
          { return( KCLASS );
          }
        case 235: break;
        case 107: 
          { return KMACRO;
          }
        case 236: break;
        case 109: 
          { return KDEBUG;
          }
        case 237: break;
        case 22: 
          { return OASSIGN;
          }
        case 238: break;
        case 50: 
          { return OGREATER_OR_EQUAL;
          }
        case 239: break;
        case 6: 
          { return OMUL;
          }
        case 240: break;
        case 56: 
          { return OCOND_AND;
          }
        case 241: break;
        case 89: 
          { return KUSING ;
          }
        case 242: break;
        case 52: 
          { return ONOT_EQ;
          }
        case 243: break;
        case 10: 
          { pushState(QUO_STRING); return OPEN_QUOTE;
          }
        case 244: break;
        case 129: 
          { return KFAKEENUM;
          }
        case 245: break;
        case 86: 
          { return KWHILE ;
          }
        case 246: break;
        case 55: 
          { return OBIT_AND_ASSIGN;
          }
        case 247: break;
        case 8: 
          { return OPLUS;
          }
        case 248: break;
        case 33: 
          { lBraceCount++; return PLCURLY;
          }
        case 249: break;
        case 78: 
          { return KELSE ;
          }
        case 250: break;
        case 7: 
          { return LITINT;
          }
        case 251: break;
        case 64: 
          { return DOC_COMMENT;
          }
        case 252: break;
        case 124: 
          { return KCONTINUE ;
          }
        case 253: break;
        case 75: 
          { return KNS;
          }
        case 254: break;
        case 120: 
          { return KBITMAP;
          }
        case 255: break;
        case 114: 
          { return KUNTYPED;
          }
        case 256: break;
        case 97: 
          { return KKEEP;
          }
        case 257: break;
        case 87: 
          { return( KBREAK );
          }
        case 258: break;
        case 18: 
          { return OSEMI;
          }
        case 259: break;
        case 29: 
          { return OREMAINDER;
          }
        case 260: break;
        case 39: 
          { return OMUL_ASSIGN;
          }
        case 261: break;
        case 44: 
          { return OIN;
          }
        case 262: break;
        case 11: 
          { pushState(APOS_STRING); return OPEN_QUOTE;
          }
        case 263: break;
        case 115: 
          { return KTYPEDEF;
          }
        case 264: break;
        case 106: 
          { return PPERROR;
          }
        case 265: break;
        case 59: 
          { return OBIT_XOR_ASSIGN;
          }
        case 266: break;
        case 67: 
          { return OTRIPLE_DOT;
          }
        case 267: break;
        case 74: 
          { return PPIF;
          }
        case 268: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
