/* The following code was generated by JFlex 1.4.3 on 3/12/12 6:20 PM */

package com.intellij.plugins.haxe.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/12/12 6:20 PM from the specification file
 * <tt>C:/workspace/idea/plugins/haxe/src/com/intellij/plugins/haxe/lang/lexer/haxe.flex</tt>
 */
public class _HaxeLexer implements FlexLexer, HaxeTokenTypes, HaxeTokenTypeSets {
  /**
   * initial size of the lookahead buffer
   */
  private static final int ZZ_BUFFERSIZE = 16384;

  /**
   * lexical states
   */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   * at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
    0, 0
  };

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
    "\11\0\1\1\1\6\1\0\1\1\1\6\22\0\1\1\1\65\1\22" +
    "\1\77\1\0\1\75\1\72\1\20\1\60\1\61\1\5\1\70\1\63" +
    "\1\16\1\17\1\4\1\12\7\11\2\10\1\52\1\62\1\73\1\64" +
    "\1\76\1\67\1\51\4\7\1\15\1\7\21\2\1\14\2\2\1\56" +
    "\1\21\1\57\1\74\1\2\1\0\1\31\1\27\1\41\1\33\1\24" +
    "\1\34\1\42\1\46\1\26\1\2\1\32\1\36\1\45\1\23\1\43" +
    "\1\40\1\53\1\30\1\44\1\37\1\35\1\47\1\25\1\13\1\50" +
    "\1\2\1\54\1\71\1\55\1\66\53\0\1\2\12\0\1\2\4\0" +
    "\1\2\5\0\27\2\1\0\37\2\1\0\u013f\2\31\0\162\2\4\0" +
    "\14\2\16\0\5\2\11\0\1\2\213\0\1\2\13\0\1\2\1\0" +
    "\3\2\1\0\1\2\1\0\24\2\1\0\54\2\1\0\46\2\1\0" +
    "\5\2\4\0\202\2\10\0\105\2\1\0\46\2\2\0\2\2\6\0" +
    "\20\2\41\0\46\2\2\0\1\2\7\0\47\2\110\0\33\2\5\0" +
    "\3\2\56\0\32\2\5\0\13\2\25\0\12\3\4\0\2\2\1\0" +
    "\143\2\1\0\1\2\17\0\2\2\7\0\2\2\12\3\3\2\2\0" +
    "\1\2\20\0\1\2\1\0\36\2\35\0\3\2\60\0\46\2\13\0" +
    "\1\2\u0152\0\66\2\3\0\1\2\22\0\1\2\7\0\12\2\4\0" +
    "\12\3\25\0\10\2\2\0\2\2\2\0\26\2\1\0\7\2\1\0" +
    "\1\2\3\0\4\2\3\0\1\2\36\0\2\2\1\0\3\2\4\0" +
    "\12\3\2\2\23\0\6\2\4\0\2\2\2\0\26\2\1\0\7\2" +
    "\1\0\2\2\1\0\2\2\1\0\2\2\37\0\4\2\1\0\1\2" +
    "\7\0\12\3\2\0\3\2\20\0\11\2\1\0\3\2\1\0\26\2" +
    "\1\0\7\2\1\0\2\2\1\0\5\2\3\0\1\2\22\0\1\2" +
    "\17\0\2\2\4\0\12\3\25\0\10\2\2\0\2\2\2\0\26\2" +
    "\1\0\7\2\1\0\2\2\1\0\5\2\3\0\1\2\36\0\2\2" +
    "\1\0\3\2\4\0\12\3\1\0\1\2\21\0\1\2\1\0\6\2" +
    "\3\0\3\2\1\0\4\2\3\0\2\2\1\0\1\2\1\0\2\2" +
    "\3\0\2\2\3\0\3\2\3\0\10\2\1\0\3\2\55\0\11\3" +
    "\25\0\10\2\1\0\3\2\1\0\27\2\1\0\12\2\1\0\5\2" +
    "\46\0\2\2\4\0\12\3\25\0\10\2\1\0\3\2\1\0\27\2" +
    "\1\0\12\2\1\0\5\2\3\0\1\2\40\0\1\2\1\0\2\2" +
    "\4\0\12\3\25\0\10\2\1\0\3\2\1\0\27\2\1\0\20\2" +
    "\46\0\2\2\4\0\12\3\25\0\22\2\3\0\30\2\1\0\11\2" +
    "\1\0\1\2\2\0\7\2\72\0\60\2\1\0\2\2\14\0\7\2" +
    "\11\0\12\3\47\0\2\2\1\0\1\2\2\0\2\2\1\0\1\2" +
    "\2\0\1\2\6\0\4\2\1\0\7\2\1\0\3\2\1\0\1\2" +
    "\1\0\1\2\2\0\2\2\1\0\4\2\1\0\2\2\11\0\1\2" +
    "\2\0\5\2\1\0\1\2\11\0\12\3\2\0\2\2\42\0\1\2" +
    "\37\0\12\3\26\0\10\2\1\0\42\2\35\0\4\2\164\0\42\2" +
    "\1\0\5\2\1\0\2\2\25\0\12\3\6\0\6\2\112\0\46\2" +
    "\12\0\51\2\7\0\132\2\5\0\104\2\5\0\122\2\6\0\7\2" +
    "\1\0\77\2\1\0\1\2\1\0\4\2\2\0\7\2\1\0\1\2" +
    "\1\0\4\2\2\0\47\2\1\0\1\2\1\0\4\2\2\0\37\2" +
    "\1\0\1\2\1\0\4\2\2\0\7\2\1\0\1\2\1\0\4\2" +
    "\2\0\7\2\1\0\7\2\1\0\27\2\1\0\37\2\1\0\1\2" +
    "\1\0\4\2\2\0\7\2\1\0\47\2\1\0\23\2\16\0\11\3" +
    "\56\0\125\2\14\0\u026c\2\2\0\10\2\12\0\32\2\5\0\113\2" +
    "\25\0\15\2\1\0\4\2\16\0\22\2\16\0\22\2\16\0\15\2" +
    "\1\0\3\2\17\0\64\2\43\0\1\2\4\0\1\2\3\0\12\3" +
    "\46\0\12\3\6\0\130\2\10\0\51\2\127\0\35\2\51\0\12\3" +
    "\36\2\2\0\5\2\u038b\0\154\2\224\0\234\2\4\0\132\2\6\0" +
    "\26\2\2\0\6\2\2\0\46\2\2\0\6\2\2\0\10\2\1\0" +
    "\1\2\1\0\1\2\1\0\1\2\1\0\37\2\2\0\65\2\1\0" +
    "\7\2\1\0\1\2\3\0\3\2\1\0\7\2\3\0\4\2\2\0" +
    "\6\2\4\0\15\2\5\0\3\2\1\0\7\2\164\0\1\2\15\0" +
    "\1\2\202\0\1\2\4\0\1\2\2\0\12\2\1\0\1\2\3\0" +
    "\5\2\6\0\1\2\1\0\1\2\1\0\1\2\1\0\4\2\1\0" +
    "\3\2\1\0\7\2\3\0\3\2\5\0\5\2\u0ebb\0\2\2\52\0" +
    "\5\2\5\0\2\2\4\0\126\2\6\0\3\2\1\0\132\2\1\0" +
    "\4\2\5\0\50\2\4\0\136\2\21\0\30\2\70\0\20\2\u0200\0" +
    "\u19b6\2\112\0\u51a6\2\132\0\u048d\2\u0773\0\u2ba4\2\u215c\0\u012e\2\2\0" +
    "\73\2\225\0\7\2\14\0\5\2\5\0\1\2\1\0\12\2\1\0" +
    "\15\2\1\0\5\2\1\0\1\2\1\0\2\2\1\0\2\2\1\0" +
    "\154\2\41\0\u016b\2\22\0\100\2\2\0\66\2\50\0\14\2\164\0" +
    "\5\2\1\0\207\2\23\0\12\3\7\0\32\2\6\0\32\2\13\0" +
    "\131\2\3\0\6\2\2\0\6\2\2\0\6\2\2\0\3\2\43\0";

  /**
   * Translates characters to character classes
   */
  private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int[] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\2\6" +
    "\1\7\1\10\1\11\1\12\17\3\1\1\1\13\1\14" +
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24" +
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34" +
    "\1\35\1\36\1\1\3\0\1\37\1\40\1\41\1\42" +
    "\1\43\1\0\1\44\1\45\1\46\1\0\2\11\2\12" +
    "\6\3\1\47\1\50\4\3\1\51\21\3\1\0\1\52" +
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62" +
    "\1\63\1\64\1\65\1\66\3\0\1\46\1\0\1\40" +
    "\1\67\1\70\1\71\1\72\15\3\1\73\1\3\1\74" +
    "\15\3\1\75\3\0\1\76\1\77\3\0\1\100\1\0" +
    "\2\67\1\101\1\3\1\102\1\103\13\3\1\104\6\3" +
    "\1\105\1\106\5\3\4\0\1\107\2\0\1\40\1\0" +
    "\2\3\1\110\4\3\1\111\5\3\1\112\4\3\1\113" +
    "\1\114\4\3\5\0\1\115\1\3\1\116\1\117\2\3" +
    "\1\120\1\121\3\3\1\122\3\3\1\123\2\3\1\124" +
    "\1\125\4\0\1\126\1\0\1\127\2\3\1\130\1\131" +
    "\1\3\1\132\1\133\1\134\2\3\1\0\1\135\1\0" +
    "\1\136\1\137\2\3\1\140\1\141\1\142\2\0\1\143" +
    "\1\3\1\144\1\0\1\145\1\146";

  private static int[] zzUnpackAction() {
    int[] result = new int[285];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do {
        result[j++] = value;
      }
      while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\u0100\0\u0140\0\u0180\0\u01c0" +
    "\0\u0200\0\u0240\0\u0280\0\u02c0\0\u0300\0\u0340\0\u0380\0\u03c0" +
    "\0\u0400\0\u0440\0\u0480\0\u04c0\0\u0500\0\u0540\0\u0580\0\u05c0" +
    "\0\u0600\0\u0640\0\u0680\0\u06c0\0\u0700\0\100\0\100\0\100" +
    "\0\100\0\100\0\100\0\100\0\100\0\100\0\u0740\0\u0780" +
    "\0\100\0\100\0\u07c0\0\u0800\0\u0840\0\u0880\0\u08c0\0\u0900" +
    "\0\u0940\0\u0980\0\u0100\0\u09c0\0\u0a00\0\u0a40\0\u0a80\0\100" +
    "\0\100\0\u0ac0\0\u0b00\0\100\0\100\0\u0b40\0\u0b80\0\100" +
    "\0\u0bc0\0\u0c00\0\100\0\u0c40\0\u0c80\0\u0cc0\0\u0d00\0\u0d40" +
    "\0\u0d80\0\u0dc0\0\300\0\u0e00\0\u0e40\0\u0e80\0\u0ec0\0\300" +
    "\0\u0f00\0\u0f40\0\u0f80\0\u0fc0\0\u1000\0\u1040\0\u1080\0\u10c0" +
    "\0\u1100\0\u1140\0\u1180\0\u11c0\0\u1200\0\u1240\0\u1280\0\u12c0" +
    "\0\u1300\0\u1340\0\100\0\100\0\100\0\100\0\100\0\100" +
    "\0\100\0\100\0\100\0\u1380\0\100\0\100\0\100\0\u13c0" +
    "\0\u1400\0\u1440\0\u1480\0\u1480\0\u14c0\0\u1500\0\u0b00\0\100" +
    "\0\300\0\u1540\0\u1580\0\u15c0\0\u1600\0\u1640\0\u1680\0\u16c0" +
    "\0\u1700\0\u1740\0\u1780\0\u17c0\0\u1800\0\u1840\0\300\0\u1880" +
    "\0\300\0\u18c0\0\u1900\0\u1940\0\u1980\0\u19c0\0\u1a00\0\u1a40" +
    "\0\u1a80\0\u1ac0\0\u1b00\0\u1b40\0\u1b80\0\u1bc0\0\300\0\u1c00" +
    "\0\u1c40\0\u1c80\0\100\0\100\0\u1cc0\0\u1d00\0\u1d40\0\100" +
    "\0\u1d80\0\u1dc0\0\100\0\300\0\u1e00\0\300\0\300\0\u1e40" +
    "\0\u1e80\0\u1ec0\0\u1f00\0\u1f40\0\u1f80\0\u1fc0\0\u2000\0\u2040" +
    "\0\u2080\0\u20c0\0\300\0\u2100\0\u2140\0\u2180\0\u21c0\0\u2200" +
    "\0\u2240\0\300\0\300\0\u2280\0\u22c0\0\u2300\0\u2340\0\u2380" +
    "\0\u23c0\0\u2400\0\u2440\0\u2480\0\100\0\u24c0\0\u2500\0\100" +
    "\0\u2540\0\u2580\0\u25c0\0\300\0\u2600\0\u2640\0\u2680\0\u26c0" +
    "\0\300\0\u2700\0\u2740\0\u2780\0\u27c0\0\u2800\0\300\0\u2840" +
    "\0\u2880\0\u28c0\0\u2900\0\300\0\300\0\u2940\0\u2980\0\u29c0" +
    "\0\u2a00\0\u2a40\0\u2a80\0\u2ac0\0\u2b00\0\u2b40\0\u2b80\0\u2bc0" +
    "\0\300\0\300\0\u2c00\0\u2c40\0\300\0\300\0\u2c80\0\u2cc0" +
    "\0\u2d00\0\300\0\u2d40\0\u2d80\0\u2dc0\0\300\0\u2e00\0\u2e40" +
    "\0\300\0\300\0\u2e80\0\u2ec0\0\u2f00\0\u2f40\0\100\0\u2f80" +
    "\0\300\0\u2fc0\0\u3000\0\300\0\300\0\u3040\0\300\0\300" +
    "\0\300\0\u3080\0\u30c0\0\u3100\0\100\0\u3140\0\100\0\100" +
    "\0\u3180\0\u31c0\0\300\0\300\0\300\0\u3200\0\u3240\0\300" +
    "\0\u3280\0\100\0\u32c0\0\300\0\100";

  private static int[] zzUnpackRowMap() {
    int[] result = new int[285];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int[] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int[] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\3\1\4" +
    "\2\10\1\11\3\4\1\12\1\13\1\14\1\2\1\15" +
    "\1\16\1\17\1\20\1\21\1\22\1\23\2\4\1\24" +
    "\1\25\1\26\1\4\1\27\1\30\1\31\1\4\1\32" +
    "\1\33\2\4\1\34\1\4\1\35\1\36\1\4\1\37" +
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47" +
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57" +
    "\1\60\1\61\1\62\101\0\1\3\4\0\1\3\73\0" +
    "\2\4\3\0\7\4\5\0\26\4\2\0\1\4\27\0" +
    "\1\63\4\0\3\63\2\0\1\64\1\0\1\65\4\0" +
    "\1\64\57\0\1\66\1\67\56\0\1\70\77\0\1\71" +
    "\16\0\1\63\4\0\3\10\2\0\1\64\1\0\1\65" +
    "\4\0\1\64\56\0\1\63\4\0\1\63\2\72\2\73" +
    "\1\64\1\0\1\65\4\0\1\64\71\0\1\74\45\0" +
    "\1\75\16\0\1\76\4\0\3\76\4\0\1\77\60\0" +
    "\6\14\1\0\11\14\1\100\1\101\56\14\6\15\1\0" +
    "\12\15\1\102\1\103\55\15\2\0\2\4\3\0\7\4" +
    "\5\0\1\4\1\104\10\4\1\105\13\4\2\0\1\4" +
    "\26\0\2\4\3\0\4\4\1\106\2\4\5\0\1\107" +
    "\12\4\1\110\12\4\2\0\1\4\26\0\2\4\3\0" +
    "\7\4\5\0\23\4\1\111\2\4\2\0\1\4\26\0" +
    "\2\4\3\0\7\4\5\0\1\112\10\4\1\113\10\4" +
    "\1\114\3\4\2\0\1\4\26\0\2\4\3\0\7\4" +
    "\5\0\5\4\1\115\20\4\2\0\1\4\26\0\2\4" +
    "\3\0\7\4\5\0\1\4\1\116\24\4\2\0\1\4" +
    "\26\0\2\4\3\0\7\4\5\0\1\4\1\117\16\4" +
    "\1\120\4\4\1\121\2\0\1\4\26\0\2\4\3\0" +
    "\7\4\5\0\12\4\1\122\5\4\1\123\5\4\2\0" +
    "\1\4\26\0\2\4\3\0\7\4\5\0\1\124\25\4" +
    "\2\0\1\4\26\0\2\4\3\0\7\4\5\0\5\4" +
    "\1\125\15\4\1\126\1\4\1\127\2\0\1\4\26\0" +
    "\2\4\3\0\7\4\5\0\5\4\1\130\1\131\3\4" +
    "\1\132\13\4\2\0\1\4\26\0\2\4\3\0\7\4" +
    "\5\0\6\4\1\133\4\4\1\134\4\4\1\135\5\4" +
    "\2\0\1\4\26\0\2\4\3\0\7\4\5\0\24\4" +
    "\1\136\1\4\2\0\1\4\26\0\2\4\3\0\7\4" +
    "\5\0\2\4\1\137\11\4\1\140\11\4\2\0\1\4" +
    "\26\0\2\4\3\0\7\4\5\0\6\4\1\141\17\4" +
    "\2\0\1\4\76\0\1\142\111\0\1\143\77\0\1\144" +
    "\77\0\1\145\3\0\1\146\73\0\1\147\4\0\1\150" +
    "\72\0\1\151\5\0\1\152\71\0\1\153\6\0\1\154" +
    "\70\0\1\155\77\0\1\156\77\0\1\157\11\0\1\160" +
    "\25\0\1\161\1\0\1\162\54\0\1\163\4\0\3\163" +
    "\3\0\1\164\51\0\1\164\12\0\1\76\4\0\3\76" +
    "\65\0\6\66\1\0\71\66\5\165\1\166\72\165\3\0" +
    "\1\63\4\0\1\63\2\72\2\0\1\64\1\0\1\65" +
    "\4\0\1\64\62\0\4\167\2\0\1\167\6\0\1\167" +
    "\2\0\1\167\1\0\1\167\1\0\2\167\4\0\1\167" +
    "\41\0\1\76\4\0\3\76\2\0\1\64\6\0\1\64" +
    "\72\0\1\170\60\0\6\14\1\0\71\14\6\15\1\0" +
    "\71\15\2\0\2\4\3\0\7\4\5\0\2\4\1\171" +
    "\23\4\2\0\1\4\26\0\2\4\3\0\7\4\5\0" +
    "\13\4\1\172\12\4\2\0\1\4\26\0\2\4\3\0" +
    "\7\4\5\0\14\4\1\173\11\4\2\0\1\4\26\0" +
    "\2\4\3\0\7\4\5\0\12\4\1\174\13\4\2\0" +
    "\1\4\26\0\2\4\3\0\7\4\5\0\21\4\1\175" +
    "\4\4\2\0\1\4\26\0\2\4\3\0\7\4\5\0" +
    "\3\4\1\176\22\4\2\0\1\4\26\0\2\4\3\0" +
    "\7\4\5\0\13\4\1\177\1\200\11\4\2\0\1\4" +
    "\26\0\2\4\3\0\7\4\5\0\15\4\1\201\10\4" +
    "\2\0\1\4\26\0\2\4\3\0\7\4\5\0\1\4" +
    "\1\202\24\4\2\0\1\4\26\0\2\4\3\0\7\4" +
    "\5\0\14\4\1\203\11\4\2\0\1\4\26\0\2\4" +
    "\3\0\7\4\5\0\11\4\1\204\14\4\2\0\1\4" +
    "\26\0\2\4\3\0\7\4\5\0\1\205\25\4\2\0" +
    "\1\4\26\0\2\4\3\0\7\4\5\0\1\206\25\4" +
    "\2\0\1\4\26\0\2\4\3\0\7\4\5\0\5\4" +
    "\1\207\20\4\2\0\1\4\26\0\2\4\3\0\7\4" +
    "\5\0\14\4\1\210\11\4\2\0\1\4\26\0\2\4" +
    "\3\0\7\4\5\0\25\4\1\211\2\0\1\4\26\0" +
    "\2\4\3\0\7\4\5\0\3\4\1\212\1\4\1\213" +
    "\20\4\2\0\1\4\26\0\2\4\3\0\7\4\5\0" +
    "\15\4\1\214\10\4\2\0\1\4\26\0\2\4\3\0" +
    "\7\4\5\0\3\4\1\215\22\4\2\0\1\4\26\0" +
    "\2\4\3\0\7\4\5\0\16\4\1\216\7\4\2\0" +
    "\1\4\26\0\2\4\3\0\7\4\5\0\4\4\1\217" +
    "\21\4\2\0\1\4\26\0\2\4\3\0\7\4\5\0" +
    "\14\4\1\220\4\4\1\221\4\4\2\0\1\4\26\0" +
    "\2\4\3\0\7\4\5\0\6\4\1\222\17\4\2\0" +
    "\1\4\26\0\2\4\3\0\7\4\5\0\1\223\25\4" +
    "\2\0\1\4\26\0\2\4\3\0\7\4\5\0\1\4" +
    "\1\224\24\4\2\0\1\4\26\0\2\4\3\0\7\4" +
    "\5\0\3\4\1\225\22\4\2\0\1\4\26\0\2\4" +
    "\3\0\7\4\5\0\6\4\1\226\17\4\2\0\1\4" +
    "\26\0\2\4\3\0\7\4\5\0\5\4\1\227\20\4" +
    "\2\0\1\4\54\0\1\230\3\0\1\231\10\0\1\232" +
    "\116\0\1\233\77\0\1\234\36\0\1\235\4\0\1\236" +
    "\5\0\1\237\75\0\1\240\46\0\1\163\4\0\3\163" +
    "\65\0\5\165\1\241\72\165\4\242\1\243\1\166\72\242" +
    "\2\0\2\4\3\0\7\4\5\0\13\4\1\244\12\4" +
    "\2\0\1\4\26\0\2\4\3\0\7\4\5\0\1\4" +
    "\1\245\24\4\2\0\1\4\26\0\2\4\3\0\7\4" +
    "\5\0\22\4\1\246\3\4\2\0\1\4\26\0\2\4" +
    "\3\0\7\4\5\0\1\4\1\247\24\4\2\0\1\4" +
    "\26\0\2\4\3\0\7\4\5\0\13\4\1\250\12\4" +
    "\2\0\1\4\26\0\2\4\3\0\7\4\5\0\3\4" +
    "\1\251\22\4\2\0\1\4\26\0\2\4\3\0\7\4" +
    "\5\0\1\4\1\252\24\4\2\0\1\4\26\0\2\4" +
    "\3\0\7\4\5\0\13\4\1\253\4\4\1\254\5\4" +
    "\2\0\1\4\26\0\2\4\3\0\7\4\5\0\6\4" +
    "\1\255\17\4\2\0\1\4\26\0\2\4\3\0\7\4" +
    "\5\0\12\4\1\256\13\4\2\0\1\4\26\0\2\4" +
    "\3\0\7\4\5\0\6\4\1\257\17\4\2\0\1\4" +
    "\26\0\2\4\3\0\7\4\5\0\6\4\1\260\17\4" +
    "\2\0\1\4\26\0\2\4\3\0\7\4\5\0\16\4" +
    "\1\261\7\4\2\0\1\4\26\0\2\4\3\0\7\4" +
    "\5\0\25\4\1\262\2\0\1\4\26\0\2\4\3\0" +
    "\7\4\5\0\21\4\1\263\4\4\2\0\1\4\26\0" +
    "\2\4\3\0\7\4\5\0\20\4\1\264\5\4\2\0" +
    "\1\4\26\0\2\4\3\0\7\4\5\0\1\4\1\265" +
    "\24\4\2\0\1\4\26\0\2\4\3\0\7\4\5\0" +
    "\24\4\1\266\1\4\2\0\1\4\26\0\2\4\3\0" +
    "\7\4\5\0\7\4\1\267\16\4\2\0\1\4\26\0" +
    "\2\4\3\0\7\4\5\0\13\4\1\270\12\4\2\0" +
    "\1\4\26\0\2\4\3\0\7\4\5\0\16\4\1\271" +
    "\7\4\2\0\1\4\26\0\2\4\3\0\7\4\5\0" +
    "\1\4\1\272\12\4\1\273\11\4\2\0\1\4\26\0" +
    "\2\4\3\0\7\4\5\0\21\4\1\274\4\4\2\0" +
    "\1\4\26\0\2\4\3\0\7\4\5\0\14\4\1\275" +
    "\11\4\2\0\1\4\26\0\2\4\3\0\7\4\5\0" +
    "\5\4\1\276\20\4\2\0\1\4\26\0\2\4\3\0" +
    "\7\4\5\0\14\4\1\277\11\4\2\0\1\4\26\0" +
    "\2\4\3\0\7\4\5\0\14\4\1\300\11\4\2\0" +
    "\1\4\50\0\1\301\101\0\1\302\2\0\1\303\77\0" +
    "\1\304\101\0\1\305\74\0\1\306\113\0\1\307\33\0" +
    "\4\165\1\310\1\241\72\165\5\242\1\311\72\242\2\0" +
    "\2\4\3\0\7\4\5\0\1\312\4\4\1\313\20\4" +
    "\2\0\1\4\26\0\2\4\3\0\7\4\5\0\1\4" +
    "\1\314\24\4\2\0\1\4\26\0\2\4\3\0\7\4" +
    "\5\0\1\315\25\4\2\0\1\4\26\0\2\4\3\0" +
    "\7\4\5\0\5\4\1\316\20\4\2\0\1\4\26\0" +
    "\2\4\3\0\7\4\5\0\1\4\1\317\24\4\2\0" +
    "\1\4\26\0\2\4\3\0\7\4\5\0\5\4\1\320" +
    "\20\4\2\0\1\4\26\0\2\4\3\0\7\4\5\0" +
    "\7\4\1\321\16\4\2\0\1\4\26\0\2\4\3\0" +
    "\7\4\5\0\5\4\1\322\20\4\2\0\1\4\26\0" +
    "\2\4\3\0\7\4\5\0\12\4\1\323\13\4\2\0" +
    "\1\4\26\0\2\4\3\0\7\4\5\0\22\4\1\324" +
    "\3\4\2\0\1\4\26\0\2\4\3\0\7\4\5\0" +
    "\14\4\1\325\11\4\2\0\1\4\26\0\2\4\3\0" +
    "\7\4\5\0\15\4\1\326\10\4\2\0\1\4\26\0" +
    "\2\4\3\0\7\4\5\0\2\4\1\327\23\4\2\0" +
    "\1\4\26\0\2\4\3\0\7\4\5\0\10\4\1\330" +
    "\15\4\2\0\1\4\26\0\2\4\3\0\7\4\5\0" +
    "\6\4\1\331\17\4\2\0\1\4\26\0\2\4\3\0" +
    "\7\4\5\0\6\4\1\332\17\4\2\0\1\4\26\0" +
    "\2\4\3\0\7\4\5\0\3\4\1\333\22\4\2\0" +
    "\1\4\26\0\2\4\3\0\7\4\5\0\23\4\1\334" +
    "\2\4\2\0\1\4\26\0\2\4\3\0\7\4\5\0" +
    "\21\4\1\335\4\4\2\0\1\4\26\0\2\4\3\0" +
    "\7\4\5\0\3\4\1\336\22\4\2\0\1\4\26\0" +
    "\2\4\3\0\7\4\5\0\5\4\1\337\20\4\2\0" +
    "\1\4\26\0\2\4\3\0\7\4\5\0\16\4\1\340" +
    "\7\4\2\0\1\4\26\0\2\4\3\0\7\4\5\0" +
    "\3\4\1\341\22\4\2\0\1\4\77\0\1\342\47\0" +
    "\1\343\106\0\1\344\106\0\1\345\101\0\1\346\60\0" +
    "\1\347\53\0\4\242\1\243\1\311\72\242\2\0\2\4" +
    "\3\0\7\4\5\0\10\4\1\350\15\4\2\0\1\4" +
    "\26\0\2\4\3\0\7\4\5\0\1\351\25\4\2\0" +
    "\1\4\26\0\2\4\3\0\7\4\5\0\1\4\1\352" +
    "\24\4\2\0\1\4\26\0\2\4\3\0\7\4\5\0" +
    "\11\4\1\353\14\4\2\0\1\4\26\0\2\4\3\0" +
    "\7\4\5\0\22\4\1\354\3\4\2\0\1\4\26\0" +
    "\2\4\3\0\7\4\5\0\14\4\1\355\11\4\2\0" +
    "\1\4\26\0\2\4\3\0\7\4\5\0\1\356\25\4" +
    "\2\0\1\4\26\0\2\4\3\0\7\4\5\0\13\4" +
    "\1\357\12\4\2\0\1\4\26\0\2\4\3\0\7\4" +
    "\5\0\3\4\1\360\22\4\2\0\1\4\26\0\2\4" +
    "\3\0\7\4\5\0\3\4\1\361\22\4\2\0\1\4" +
    "\26\0\2\4\3\0\7\4\5\0\1\4\1\362\24\4" +
    "\2\0\1\4\26\0\2\4\3\0\7\4\5\0\1\4" +
    "\1\363\24\4\2\0\1\4\26\0\2\4\3\0\7\4" +
    "\5\0\14\4\1\364\11\4\2\0\1\4\26\0\2\4" +
    "\3\0\7\4\5\0\17\4\1\365\6\4\2\0\1\4" +
    "\26\0\2\4\3\0\7\4\5\0\16\4\1\366\7\4" +
    "\2\0\1\4\26\0\2\4\3\0\7\4\5\0\1\367" +
    "\25\4\2\0\1\4\26\0\2\4\3\0\7\4\5\0" +
    "\3\4\1\370\22\4\2\0\1\4\26\0\2\4\3\0" +
    "\7\4\5\0\23\4\1\371\2\4\2\0\1\4\26\0" +
    "\2\4\3\0\7\4\5\0\16\4\1\372\7\4\2\0" +
    "\1\4\61\0\1\373\73\0\1\374\72\0\1\375\103\0" +
    "\1\376\77\0\1\377\75\0\1\u0100\53\0\2\4\3\0" +
    "\7\4\5\0\21\4\1\u0101\4\4\2\0\1\4\26\0" +
    "\2\4\3\0\7\4\5\0\6\4\1\u0102\17\4\2\0" +
    "\1\4\26\0\2\4\3\0\7\4\5\0\1\4\1\u0103" +
    "\24\4\2\0\1\4\26\0\2\4\3\0\7\4\5\0" +
    "\14\4\1\u0104\11\4\2\0\1\4\26\0\2\4\3\0" +
    "\7\4\5\0\16\4\1\u0105\7\4\2\0\1\4\26\0" +
    "\2\4\3\0\7\4\5\0\20\4\1\u0106\5\4\2\0" +
    "\1\4\26\0\2\4\3\0\7\4\5\0\11\4\1\u0107" +
    "\14\4\2\0\1\4\26\0\2\4\3\0\7\4\5\0" +
    "\1\4\1\u0108\24\4\2\0\1\4\26\0\2\4\3\0" +
    "\7\4\5\0\1\4\1\u0109\24\4\2\0\1\4\26\0" +
    "\2\4\3\0\7\4\5\0\12\4\1\u010a\13\4\2\0" +
    "\1\4\26\0\2\4\3\0\7\4\5\0\10\4\1\u010b" +
    "\15\4\2\0\1\4\52\0\1\u010c\107\0\1\u010d\56\0" +
    "\1\u010e\125\0\1\u010f\70\0\1\u0110\45\0\2\4\3\0" +
    "\7\4\5\0\16\4\1\u0111\7\4\2\0\1\4\26\0" +
    "\2\4\3\0\7\4\5\0\1\u0112\25\4\2\0\1\4" +
    "\26\0\2\4\3\0\7\4\5\0\1\u0113\25\4\2\0" +
    "\1\4\26\0\2\4\3\0\7\4\5\0\1\4\1\u0114" +
    "\24\4\2\0\1\4\26\0\2\4\3\0\7\4\5\0" +
    "\1\4\1\u0115\24\4\2\0\1\4\54\0\1\u0116\72\0" +
    "\1\u0117\56\0\2\4\3\0\7\4\5\0\1\4\1\u0118" +
    "\24\4\2\0\1\4\26\0\2\4\3\0\7\4\5\0" +
    "\14\4\1\u0119\11\4\2\0\1\4\50\0\1\u011a\110\0" +
    "\1\u011b\44\0\2\4\3\0\7\4\5\0\21\4\1\u011c" +
    "\4\4\2\0\1\4\71\0\1\u011d\32\0";

  private static int[] zzUnpackTrans() {
    int[] result = new int[13056];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do {
        result[j++] = value;
      }
      while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\33\1\11\11\2\1\2\11\10\1\3\0" +
    "\2\1\2\11\1\1\1\0\2\11\1\1\1\0\1\11" +
    "\2\1\1\11\36\1\1\0\11\11\1\1\3\11\3\0" +
    "\1\1\1\0\3\1\1\11\37\1\3\0\2\11\3\0" +
    "\1\11\1\0\1\1\1\11\35\1\4\0\1\11\2\0" +
    "\1\11\1\0\30\1\5\0\24\1\4\0\1\11\1\0" +
    "\13\1\1\0\1\11\1\0\2\11\5\1\2\0\2\1" +
    "\1\11\1\0\1\1\1\11";

  private static int[] zzUnpackAttribute() {
    int[] result = new int[285];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do {
        result[j++] = value;
      }
      while (--count > 0);
    }
    return j;
  }

  /**
   * the current state of the DFA
   */
  private int zzState;

  /**
   * the current lexical state
   */
  private int zzLexicalState = YYINITIAL;

  /**
   * this buffer contains the current text to be matched and is
   * the source of the yytext() string
   */
  private CharSequence zzBuffer = "";

  /**
   * this buffer may contains the current text array to be matched when it is cheap to acquire it
   */
  private char[] zzBufferArray;

  /**
   * the textposition at the last accepting state
   */
  private int zzMarkedPos;

  /**
   * the textposition at the last state to be included in yytext
   */
  private int zzPushbackPos;

  /**
   * the current text position in the buffer
   */
  private int zzCurrentPos;

  /**
   * startRead marks the beginning of the yytext() string in the buffer
   */
  private int zzStartRead;

  /**
   * endRead marks the last character in the buffer, that has been read
   * from input
   */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /**
   * zzAtEOF == true <=> the scanner is at the EOF
   */
  private boolean zzAtEOF;

  /**
   * denotes if the user-EOF-code has already been executed
   */
  private boolean zzEOFDone;


  public _HaxeLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param in the java.io.Inputstream to read input from.
   */
  public _HaxeLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed the packed character translation table
   * @return the unpacked character translation table
   */
  private static char[] zzUnpackCMap(String packed) {
    char[] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1320) {
      int count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do {
        map[j++] = value;
      }
      while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return <code>false</code>, iff there was new input.
   * @throws java.io.IOException if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   * <p/>
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead + pos] : zzBuffer.charAt(zzStartRead + pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos - zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   * <p/>
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   * <p/>
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param errorCode the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   * <p/>
   * They will be read again by then next call of the scanning method
   *
   * @param number the number of characters to be read again.
   *               This number must not be greater than yylength()!
   */
  public void yypushback(int number) {
    if (number > yylength()) {
      zzScanError(ZZ_PUSHBACK_2BIG);
    }

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return the next token
   * @throws java.io.IOException if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char[] zzCMapL = ZZ_CMAP;

    int[] zzTransL = ZZ_TRANS;
    int[] zzRowMapL = ZZ_ROWMAP;
    int[] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction:
      {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos = zzCurrentPosL;
            zzMarkedPos = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL = zzCurrentPos;
            zzMarkedPosL = zzMarkedPos;
            zzBufferL = zzBuffer;
            zzEndReadL = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ((zzAttributes & 1) == 1) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ((zzAttributes & 8) == 8) break zzForAction;
          }
        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 40: {
          return KIF;
        }
        case 103:
          break;
        case 7: {
          return OMINUS;
        }
        case 104:
          break;
        case 22: {
          return OCOMPLEMENT;
        }
        case 105:
          break;
        case 84: {
          return KSWITCH;
        }
        case 106:
          break;
        case 32: {
          return MML_COMMENT;
        }
        case 107:
          break;
        case 26: {
          return OBIT_AND;
        }
        case 108:
          break;
        case 23: {
          return OQUEST;
        }
        case 109:
          break;
        case 10: {
          return LITSTRING;
        }
        case 110:
          break;
        case 4: {
          return OQUOTIENT;
        }
        case 111:
          break;
        case 98: {
          return KOVERRIDE;
        }
        case 112:
          break;
        case 70: {
          return (KCAST);
        }
        case 113:
          break;
        case 47: {
          return OCOND_OR;
        }
        case 114:
          break;
        case 74: {
          return KTHROW;
        }
        case 115:
          break;
        case 3: {
          return ID;
        }
        case 116:
          break;
        case 46: {
          return OBIT_OR_ASSIGN;
        }
        case 117:
          break;
        case 33: {
          return OQUOTIENT_ASSIGN;
        }
        case 118:
          break;
        case 51: {
          return OSHIFT_LEFT;
        }
        case 119:
          break;
        case 80: {
          return KIMPORT;
        }
        case 120:
          break;
        case 65: {
          return KNULL;
        }
        case 121:
          break;
        case 87: {
          return (KEXTENDS);
        }
        case 122:
          break;
        case 66: {
          return (KENUM);
        }
        case 123:
          break;
        case 15: {
          return PRBRACK;
        }
        case 124:
          break;
        case 1: {
          yybegin(YYINITIAL);
          return com.intellij.psi.TokenType.BAD_CHARACTER;
        }
        case 125:
          break;
        case 14: {
          return PLBRACK;
        }
        case 126:
          break;
        case 75: {
          return KCATCH;
        }
        case 127:
          break;
        case 79: {
          return KINLINE;
        }
        case 128:
          break;
        case 92: {
          return (KPACKAGE);
        }
        case 129:
          break;
        case 85: {
          return KSTATIC;
        }
        case 130:
          break;
        case 68: {
          return KTHIS;
        }
        case 131:
          break;
        case 101: {
          return (KIMPLEMENTS);
        }
        case 132:
          break;
        case 2: {
          return com.intellij.psi.TokenType.WHITE_SPACE;
        }
        case 133:
          break;
        case 99: {
          return (KINTERFACE);
        }
        case 134:
          break;
        case 44: {
          return OPLUS_ASSIGN;
        }
        case 135:
          break;
        case 28: {
          return OBIT_XOR;
        }
        case 136:
          break;
        case 45: {
          return OPLUS_PLUS;
        }
        case 137:
          break;
        case 78: {
          return KEXTERN;
        }
        case 138:
          break;
        case 53: {
          return OREMAINDER_ASSIGN;
        }
        case 139:
          break;
        case 35: {
          return LITOCT;
        }
        case 140:
          break;
        case 11: {
          return OCOLON;
        }
        case 141:
          break;
        case 62: {
          return OSHIFT_LEFT_ASSIGN;
        }
        case 142:
          break;
        case 77: {
          return PPELSE;
        }
        case 143:
          break;
        case 50: {
          return OLESS_OR_EQUAL;
        }
        case 144:
          break;
        case 31: {
          return MSL_COMMENT;
        }
        case 145:
          break;
        case 61: {
          return KVAR;
        }
        case 146:
          break;
        case 8: {
          return ODOT;
        }
        case 147:
          break;
        case 37: {
          return OMINUS_ASSIGN;
        }
        case 148:
          break;
        case 93: {
          return KFINAL;
        }
        case 149:
          break;
        case 71: {
          return PPEND;
        }
        case 150:
          break;
        case 27: {
          return OLESS;
        }
        case 151:
          break;
        case 56: {
          return LITHEX;
        }
        case 152:
          break;
        case 38: {
          return LITFLOAT;
        }
        case 153:
          break;
        case 81: {
          return KRETURN;
        }
        case 154:
          break;
        case 17: {
          return PRPAREN;
        }
        case 155:
          break;
        case 58: {
          return ONEW;
        }
        case 156:
          break;
        case 36: {
          return OMINUS_MINUS;
        }
        case 157:
          break;
        case 16: {
          return PLPAREN;
        }
        case 158:
          break;
        case 83: {
          return KPUBLIC;
        }
        case 159:
          break;
        case 59: {
          return KFOR;
        }
        case 160:
          break;
        case 25: {
          return OBIT_OR;
        }
        case 161:
          break;
        case 89: {
          return KDYNAMIC;
        }
        case 162:
          break;
        case 88: {
          return (KDEFAULT);
        }
        case 163:
          break;
        case 30: {
          return OGREATER;
        }
        case 164:
          break;
        case 19: {
          return OCOMMA;
        }
        case 165:
          break;
        case 96: {
          return (KFUNCTION);
        }
        case 166:
          break;
        case 9: {
          return LITCHAR;
        }
        case 167:
          break;
        case 42: {
          return OEQ;
        }
        case 168:
          break;
        case 41: {
          return KDO;
        }
        case 169:
          break;
        case 100: {
          return KREQUIRE;
        }
        case 170:
          break;
        case 91: {
          return KPRIVATE;
        }
        case 171:
          break;
        case 63: {
          return OSHIFT_RIGHT_ASSIGN;
        }
        case 172:
          break;
        case 21: {
          return ONOT;
        }
        case 173:
          break;
        case 13: {
          return PRCURLY;
        }
        case 174:
          break;
        case 60: {
          return KTRY;
        }
        case 175:
          break;
        case 95: {
          return PPELSEIF;
        }
        case 176:
          break;
        case 69: {
          return (KCASE);
        }
        case 177:
          break;
        case 12: {
          return PLCURLY;
        }
        case 178:
          break;
        case 76: {
          return (KCLASS);
        }
        case 179:
          break;
        case 94: {
          return KMACRO;
        }
        case 180:
          break;
        case 20: {
          return OASSIGN;
        }
        case 181:
          break;
        case 54: {
          return OGREATER_OR_EQUAL;
        }
        case 182:
          break;
        case 5: {
          return OMUL;
        }
        case 183:
          break;
        case 49: {
          return OCOND_AND;
        }
        case 184:
          break;
        case 43: {
          return ONOT_EQ;
        }
        case 185:
          break;
        case 102: {
          return KFAKEENUM;
        }
        case 186:
          break;
        case 72: {
          return KWHILE;
        }
        case 187:
          break;
        case 48: {
          return OBIT_AND_ASSIGN;
        }
        case 188:
          break;
        case 24: {
          return OPLUS;
        }
        case 189:
          break;
        case 67: {
          return KELSE;
        }
        case 190:
          break;
        case 6: {
          return LITINT;
        }
        case 191:
          break;
        case 55: {
          return DOC_COMMENT;
        }
        case 192:
          break;
        case 97: {
          return KCONTINUE;
        }
        case 193:
          break;
        case 82: {
          return KUNTYPE;
        }
        case 194:
          break;
        case 73: {
          return (KBREAK);
        }
        case 195:
          break;
        case 18: {
          return OSEMI;
        }
        case 196:
          break;
        case 29: {
          return OREMAINDER;
        }
        case 197:
          break;
        case 34: {
          return OMUL_ASSIGN;
        }
        case 198:
          break;
        case 39: {
          return OIN;
        }
        case 199:
          break;
        case 90: {
          return KTYPEDEF;
        }
        case 200:
          break;
        case 86: {
          return PPERROR;
        }
        case 201:
          break;
        case 52: {
          return OBIT_XOR_ASSIGN;
        }
        case 202:
          break;
        case 57: {
          return OTRIPLE_DOT;
        }
        case 203:
          break;
        case 64: {
          return PPIF;
        }
        case 204:
          break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }
}
