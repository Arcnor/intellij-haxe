/* The following code was generated by JFlex 1.4.3 on 3/23/12 5:34 PM */

package com.intellij.plugins.haxe.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.*;
import java.lang.reflect.Field;
import org.jetbrains.annotations.NotNull;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/23/12 5:34 PM from the specification file
 * <tt>C:/workspace/idea/plugins/haxe/src/com/intellij/plugins/haxe/lang/lexer/haxe.flex</tt>
 */
public class _HaxeLexer implements FlexLexer, HaxeTokenTypes, HaxeTokenTypeSets {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\10\1\0\1\1\1\10\22\0\1\1\1\70\1\24"+
    "\1\100\1\0\1\77\1\74\1\22\1\61\1\62\1\7\1\20\1\64"+
    "\1\65\1\21\1\6\1\14\7\13\2\12\1\53\1\63\1\75\1\67"+
    "\1\66\1\72\1\5\4\11\1\17\1\11\21\2\1\16\2\2\1\57"+
    "\1\23\1\60\1\76\1\3\1\0\1\33\1\31\1\43\1\35\1\26"+
    "\1\36\1\44\1\50\1\30\1\2\1\34\1\40\1\47\1\25\1\45"+
    "\1\42\1\54\1\32\1\46\1\41\1\37\1\51\1\27\1\15\1\52"+
    "\1\2\1\55\1\73\1\56\1\71\53\0\1\2\12\0\1\2\4\0"+
    "\1\2\5\0\27\2\1\0\37\2\1\0\u013f\2\31\0\162\2\4\0"+
    "\14\2\16\0\5\2\11\0\1\2\213\0\1\2\13\0\1\2\1\0"+
    "\3\2\1\0\1\2\1\0\24\2\1\0\54\2\1\0\46\2\1\0"+
    "\5\2\4\0\202\2\10\0\105\2\1\0\46\2\2\0\2\2\6\0"+
    "\20\2\41\0\46\2\2\0\1\2\7\0\47\2\110\0\33\2\5\0"+
    "\3\2\56\0\32\2\5\0\13\2\25\0\12\4\4\0\2\2\1\0"+
    "\143\2\1\0\1\2\17\0\2\2\7\0\2\2\12\4\3\2\2\0"+
    "\1\2\20\0\1\2\1\0\36\2\35\0\3\2\60\0\46\2\13\0"+
    "\1\2\u0152\0\66\2\3\0\1\2\22\0\1\2\7\0\12\2\4\0"+
    "\12\4\25\0\10\2\2\0\2\2\2\0\26\2\1\0\7\2\1\0"+
    "\1\2\3\0\4\2\3\0\1\2\36\0\2\2\1\0\3\2\4\0"+
    "\12\4\2\2\23\0\6\2\4\0\2\2\2\0\26\2\1\0\7\2"+
    "\1\0\2\2\1\0\2\2\1\0\2\2\37\0\4\2\1\0\1\2"+
    "\7\0\12\4\2\0\3\2\20\0\11\2\1\0\3\2\1\0\26\2"+
    "\1\0\7\2\1\0\2\2\1\0\5\2\3\0\1\2\22\0\1\2"+
    "\17\0\2\2\4\0\12\4\25\0\10\2\2\0\2\2\2\0\26\2"+
    "\1\0\7\2\1\0\2\2\1\0\5\2\3\0\1\2\36\0\2\2"+
    "\1\0\3\2\4\0\12\4\1\0\1\2\21\0\1\2\1\0\6\2"+
    "\3\0\3\2\1\0\4\2\3\0\2\2\1\0\1\2\1\0\2\2"+
    "\3\0\2\2\3\0\3\2\3\0\10\2\1\0\3\2\55\0\11\4"+
    "\25\0\10\2\1\0\3\2\1\0\27\2\1\0\12\2\1\0\5\2"+
    "\46\0\2\2\4\0\12\4\25\0\10\2\1\0\3\2\1\0\27\2"+
    "\1\0\12\2\1\0\5\2\3\0\1\2\40\0\1\2\1\0\2\2"+
    "\4\0\12\4\25\0\10\2\1\0\3\2\1\0\27\2\1\0\20\2"+
    "\46\0\2\2\4\0\12\4\25\0\22\2\3\0\30\2\1\0\11\2"+
    "\1\0\1\2\2\0\7\2\72\0\60\2\1\0\2\2\14\0\7\2"+
    "\11\0\12\4\47\0\2\2\1\0\1\2\2\0\2\2\1\0\1\2"+
    "\2\0\1\2\6\0\4\2\1\0\7\2\1\0\3\2\1\0\1\2"+
    "\1\0\1\2\2\0\2\2\1\0\4\2\1\0\2\2\11\0\1\2"+
    "\2\0\5\2\1\0\1\2\11\0\12\4\2\0\2\2\42\0\1\2"+
    "\37\0\12\4\26\0\10\2\1\0\42\2\35\0\4\2\164\0\42\2"+
    "\1\0\5\2\1\0\2\2\25\0\12\4\6\0\6\2\112\0\46\2"+
    "\12\0\51\2\7\0\132\2\5\0\104\2\5\0\122\2\6\0\7\2"+
    "\1\0\77\2\1\0\1\2\1\0\4\2\2\0\7\2\1\0\1\2"+
    "\1\0\4\2\2\0\47\2\1\0\1\2\1\0\4\2\2\0\37\2"+
    "\1\0\1\2\1\0\4\2\2\0\7\2\1\0\1\2\1\0\4\2"+
    "\2\0\7\2\1\0\7\2\1\0\27\2\1\0\37\2\1\0\1\2"+
    "\1\0\4\2\2\0\7\2\1\0\47\2\1\0\23\2\16\0\11\4"+
    "\56\0\125\2\14\0\u026c\2\2\0\10\2\12\0\32\2\5\0\113\2"+
    "\25\0\15\2\1\0\4\2\16\0\22\2\16\0\22\2\16\0\15\2"+
    "\1\0\3\2\17\0\64\2\43\0\1\2\4\0\1\2\3\0\12\4"+
    "\46\0\12\4\6\0\130\2\10\0\51\2\127\0\35\2\51\0\12\4"+
    "\36\2\2\0\5\2\u038b\0\154\2\224\0\234\2\4\0\132\2\6\0"+
    "\26\2\2\0\6\2\2\0\46\2\2\0\6\2\2\0\10\2\1\0"+
    "\1\2\1\0\1\2\1\0\1\2\1\0\37\2\2\0\65\2\1\0"+
    "\7\2\1\0\1\2\3\0\3\2\1\0\7\2\3\0\4\2\2\0"+
    "\6\2\4\0\15\2\5\0\3\2\1\0\7\2\164\0\1\2\15\0"+
    "\1\2\202\0\1\2\4\0\1\2\2\0\12\2\1\0\1\2\3\0"+
    "\5\2\6\0\1\2\1\0\1\2\1\0\1\2\1\0\4\2\1\0"+
    "\3\2\1\0\7\2\3\0\3\2\5\0\5\2\u0ebb\0\2\2\52\0"+
    "\5\2\5\0\2\2\4\0\126\2\6\0\3\2\1\0\132\2\1\0"+
    "\4\2\5\0\50\2\4\0\136\2\21\0\30\2\70\0\20\2\u0200\0"+
    "\u19b6\2\112\0\u51a6\2\132\0\u048d\2\u0773\0\u2ba4\2\u215c\0\u012e\2\2\0"+
    "\73\2\225\0\7\2\14\0\5\2\5\0\1\2\1\0\12\2\1\0"+
    "\15\2\1\0\5\2\1\0\1\2\1\0\2\2\1\0\2\2\1\0"+
    "\154\2\41\0\u016b\2\22\0\100\2\2\0\66\2\50\0\14\2\164\0"+
    "\5\2\1\0\207\2\23\0\12\4\7\0\32\2\6\0\32\2\13\0"+
    "\131\2\3\0\6\2\2\0\6\2\2\0\6\2\2\0\3\2\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\1\1\4\1\5\2\6"+
    "\1\7\1\10\1\11\1\12\17\3\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\1\3\0\1\37\1\0\1\40\1\41\1\42"+
    "\1\43\1\44\1\0\1\45\1\46\1\47\1\0\2\11"+
    "\2\12\6\3\1\50\1\51\4\3\1\52\22\3\1\53"+
    "\1\54\1\55\1\0\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\2\0\1\47"+
    "\15\0\1\41\1\71\1\72\1\73\1\74\16\3\1\75"+
    "\2\3\1\76\15\3\1\77\1\100\1\101\3\0\1\102"+
    "\2\0\1\103\17\0\2\71\1\104\1\3\1\105\1\106"+
    "\14\3\1\107\1\110\6\3\1\111\1\112\5\3\1\113"+
    "\23\0\1\41\1\0\2\3\1\114\4\3\1\115\3\3"+
    "\1\116\2\3\1\117\4\3\1\120\1\121\4\3\1\0"+
    "\1\122\2\0\1\123\3\0\1\124\7\0\1\125\1\0"+
    "\1\126\1\3\1\127\1\130\2\3\1\131\1\132\7\3"+
    "\1\133\2\3\1\134\1\135\1\136\4\0\1\137\1\0"+
    "\1\140\1\141\5\0\1\142\1\143\2\3\1\144\1\145"+
    "\1\3\1\146\1\147\1\150\1\151\2\3\1\152\1\153"+
    "\1\0\1\154\4\0\1\155\1\156\2\3\1\157\1\160"+
    "\1\161\1\162\1\163\3\0\1\164\1\3\1\165\1\0"+
    "\1\166\1\167\1\170";

  private static int [] zzUnpackAction() {
    int [] result = new int[364];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\u0104\0\u0145\0\u0186\0\u01c7"+
    "\0\u0208\0\u0249\0\u028a\0\u02cb\0\u030c\0\u034d\0\u038e\0\u03cf"+
    "\0\u0410\0\u0451\0\u0492\0\u04d3\0\u0514\0\u0555\0\u0596\0\u05d7"+
    "\0\u0618\0\u0659\0\u069a\0\u06db\0\u071c\0\101\0\101\0\101"+
    "\0\101\0\101\0\101\0\101\0\101\0\101\0\u075d\0\u079e"+
    "\0\u07df\0\u0820\0\101\0\101\0\u0861\0\u08a2\0\u08e3\0\u0924"+
    "\0\u0965\0\u09a6\0\u0104\0\u09e7\0\u0a28\0\u0a69\0\u0aaa\0\u0aeb"+
    "\0\u0b2c\0\101\0\101\0\u0b6d\0\u0bae\0\101\0\101\0\u0bef"+
    "\0\u0c30\0\101\0\u0c71\0\u0cb2\0\101\0\u0cf3\0\u0d34\0\u0d75"+
    "\0\u0db6\0\u0df7\0\u0e38\0\u0e79\0\303\0\u0eba\0\u0efb\0\u0f3c"+
    "\0\u0f7d\0\303\0\u0fbe\0\u0fff\0\u1040\0\u1081\0\u10c2\0\u1103"+
    "\0\u1144\0\u1185\0\u11c6\0\u1207\0\u1248\0\u1289\0\u12ca\0\u130b"+
    "\0\u134c\0\u138d\0\u13ce\0\u140f\0\101\0\101\0\101\0\u1450"+
    "\0\101\0\101\0\101\0\101\0\101\0\101\0\101\0\101"+
    "\0\u1491\0\101\0\101\0\u14d2\0\u1513\0\u1554\0\u1554\0\u1595"+
    "\0\u15d6\0\u1617\0\u1658\0\u1699\0\u16da\0\u171b\0\u175c\0\u179d"+
    "\0\u17de\0\u181f\0\u1860\0\u18a1\0\u18e2\0\u0bae\0\101\0\303"+
    "\0\u1923\0\u1964\0\u19a5\0\u19e6\0\u1a27\0\u1a68\0\u1aa9\0\u1aea"+
    "\0\u1b2b\0\u1b6c\0\u1bad\0\u1bee\0\u1c2f\0\u1c70\0\303\0\u1cb1"+
    "\0\u1cf2\0\303\0\u1d33\0\u1d74\0\u1db5\0\u1df6\0\u1e37\0\u1e78"+
    "\0\u1eb9\0\u1efa\0\u1f3b\0\u1f7c\0\u1fbd\0\u1ffe\0\u203f\0\303"+
    "\0\101\0\101\0\u2080\0\u20c1\0\u2102\0\101\0\u2143\0\u2184"+
    "\0\101\0\u21c5\0\u2206\0\u2247\0\u2288\0\u22c9\0\u230a\0\u234b"+
    "\0\u238c\0\u23cd\0\u240e\0\u244f\0\u2490\0\u24d1\0\u2512\0\u2553"+
    "\0\u2594\0\101\0\303\0\u25d5\0\303\0\303\0\u2616\0\u2657"+
    "\0\u2698\0\u26d9\0\u271a\0\u275b\0\u279c\0\u27dd\0\u281e\0\u285f"+
    "\0\u28a0\0\u28e1\0\303\0\303\0\u2922\0\u2963\0\u29a4\0\u29e5"+
    "\0\u2a26\0\u2a67\0\303\0\303\0\u2aa8\0\u2ae9\0\u2b2a\0\u2b6b"+
    "\0\u2bac\0\101\0\u2bed\0\u2c2e\0\u2c6f\0\u2cb0\0\u2cf1\0\u2d32"+
    "\0\u2d73\0\u2db4\0\u2df5\0\u2e36\0\u2e77\0\u2eb8\0\u2ef9\0\u2f3a"+
    "\0\u2f7b\0\u2fbc\0\u2ffd\0\u303e\0\u307f\0\101\0\u30c0\0\u3101"+
    "\0\u3142\0\303\0\u3183\0\u31c4\0\u3205\0\u3246\0\303\0\u3287"+
    "\0\u32c8\0\u3309\0\303\0\u334a\0\u338b\0\303\0\u33cc\0\u340d"+
    "\0\u344e\0\u348f\0\303\0\303\0\u34d0\0\u3511\0\u3552\0\u3593"+
    "\0\u35d4\0\u3615\0\u3656\0\u3697\0\101\0\u36d8\0\u3719\0\u375a"+
    "\0\101\0\u379b\0\u37dc\0\u381d\0\u385e\0\u389f\0\u38e0\0\u3921"+
    "\0\101\0\u3962\0\101\0\u39a3\0\303\0\303\0\u39e4\0\u3a25"+
    "\0\303\0\303\0\u3a66\0\u3aa7\0\u3ae8\0\u3b29\0\u3b6a\0\u3bab"+
    "\0\u3bec\0\303\0\u3c2d\0\u3c6e\0\303\0\303\0\101\0\u3caf"+
    "\0\u3cf0\0\u3d31\0\u3d72\0\101\0\u3db3\0\101\0\101\0\u3df4"+
    "\0\u3e35\0\u3e76\0\u3eb7\0\u3ef8\0\101\0\303\0\u3f39\0\u3f7a"+
    "\0\303\0\303\0\u3fbb\0\303\0\303\0\303\0\303\0\u3ffc"+
    "\0\u403d\0\101\0\101\0\u407e\0\101\0\u40bf\0\u4100\0\u4141"+
    "\0\u4182\0\101\0\101\0\u41c3\0\u4204\0\303\0\303\0\303"+
    "\0\101\0\101\0\u4245\0\u4286\0\u42c7\0\303\0\u4308\0\101"+
    "\0\u4349\0\101\0\303\0\101";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[364];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\10\1\3"+
    "\1\4\2\11\1\12\3\4\1\13\1\14\1\15\1\2"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\2\4"+
    "\1\25\1\26\1\27\1\4\1\30\1\31\1\32\1\4"+
    "\1\33\1\34\2\4\1\35\1\4\1\36\1\4\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\102\0\1\3\6\0\1\3\72\0"+
    "\3\4\4\0\7\4\5\0\26\4\1\0\1\4\30\0"+
    "\1\63\5\0\3\63\2\0\1\64\1\0\1\65\4\0"+
    "\1\64\54\0\2\66\5\0\1\66\3\0\3\66\5\0"+
    "\26\66\1\67\1\66\32\0\1\70\1\71\57\0\1\72"+
    "\100\0\1\73\15\0\1\63\5\0\3\11\2\0\1\64"+
    "\1\0\1\65\4\0\1\64\56\0\1\63\5\0\1\63"+
    "\2\74\2\75\1\64\1\0\1\65\4\0\1\64\72\0"+
    "\1\76\46\0\1\77\15\0\1\100\5\0\3\100\4\0"+
    "\1\101\57\0\10\15\1\0\11\15\1\102\1\103\55\15"+
    "\10\16\1\0\12\16\1\104\1\105\54\16\2\0\3\4"+
    "\4\0\7\4\5\0\1\4\1\106\10\4\1\107\13\4"+
    "\1\0\1\4\26\0\3\4\4\0\4\4\1\110\2\4"+
    "\5\0\1\111\12\4\1\112\12\4\1\0\1\4\26\0"+
    "\3\4\4\0\7\4\5\0\23\4\1\113\2\4\1\0"+
    "\1\4\26\0\3\4\4\0\7\4\5\0\1\114\10\4"+
    "\1\115\10\4\1\116\3\4\1\0\1\4\26\0\3\4"+
    "\4\0\7\4\5\0\5\4\1\117\20\4\1\0\1\4"+
    "\26\0\3\4\4\0\7\4\5\0\1\4\1\120\24\4"+
    "\1\0\1\4\26\0\3\4\4\0\7\4\5\0\1\4"+
    "\1\121\16\4\1\122\4\4\1\123\1\0\1\4\26\0"+
    "\3\4\4\0\7\4\5\0\6\4\1\124\3\4\1\125"+
    "\5\4\1\126\5\4\1\0\1\4\26\0\3\4\4\0"+
    "\7\4\5\0\1\127\25\4\1\0\1\4\26\0\3\4"+
    "\4\0\7\4\5\0\5\4\1\130\15\4\1\131\1\4"+
    "\1\132\1\0\1\4\26\0\3\4\4\0\7\4\5\0"+
    "\5\4\1\133\1\134\3\4\1\135\13\4\1\0\1\4"+
    "\26\0\3\4\4\0\7\4\5\0\6\4\1\136\4\4"+
    "\1\137\4\4\1\140\5\4\1\0\1\4\26\0\3\4"+
    "\4\0\7\4\5\0\24\4\1\141\1\4\1\0\1\4"+
    "\26\0\3\4\4\0\7\4\5\0\2\4\1\142\11\4"+
    "\1\143\11\4\1\0\1\4\26\0\3\4\4\0\7\4"+
    "\5\0\6\4\1\144\17\4\1\0\1\4\111\0\1\145"+
    "\1\146\1\147\77\0\1\150\1\151\100\0\1\152\100\0"+
    "\1\153\100\0\1\154\3\0\1\155\74\0\1\156\4\0"+
    "\1\157\73\0\1\160\5\0\1\161\72\0\1\162\100\0"+
    "\1\163\37\0\1\164\1\0\1\165\54\0\1\166\5\0"+
    "\3\166\3\0\1\167\44\0\1\167\17\0\1\100\5\0"+
    "\3\100\66\0\3\66\4\0\7\66\5\0\26\66\1\0"+
    "\1\66\51\0\1\170\3\0\1\171\1\172\1\0\1\173"+
    "\1\174\1\175\3\0\1\176\1\177\1\200\1\0\1\201"+
    "\1\202\1\203\30\0\10\70\1\0\70\70\7\204\1\205"+
    "\71\204\4\0\1\63\5\0\1\63\2\74\2\0\1\64"+
    "\1\0\1\65\4\0\1\64\63\0\4\206\2\0\1\206"+
    "\6\0\1\206\2\0\1\206\1\0\1\206\1\0\2\206"+
    "\4\0\1\206\41\0\1\100\5\0\3\100\2\0\1\64"+
    "\6\0\1\64\73\0\1\207\57\0\10\15\1\0\70\15"+
    "\10\16\1\0\70\16\2\0\3\4\4\0\7\4\5\0"+
    "\2\4\1\210\23\4\1\0\1\4\26\0\3\4\4\0"+
    "\7\4\5\0\13\4\1\211\12\4\1\0\1\4\26\0"+
    "\3\4\4\0\7\4\5\0\14\4\1\212\11\4\1\0"+
    "\1\4\26\0\3\4\4\0\7\4\5\0\12\4\1\213"+
    "\13\4\1\0\1\4\26\0\3\4\4\0\7\4\5\0"+
    "\21\4\1\214\4\4\1\0\1\4\26\0\3\4\4\0"+
    "\7\4\5\0\3\4\1\215\22\4\1\0\1\4\26\0"+
    "\3\4\4\0\7\4\5\0\13\4\1\216\1\217\11\4"+
    "\1\0\1\4\26\0\3\4\4\0\7\4\5\0\15\4"+
    "\1\220\10\4\1\0\1\4\26\0\3\4\4\0\7\4"+
    "\5\0\1\4\1\221\24\4\1\0\1\4\26\0\3\4"+
    "\4\0\7\4\5\0\14\4\1\222\11\4\1\0\1\4"+
    "\26\0\3\4\4\0\7\4\5\0\11\4\1\223\14\4"+
    "\1\0\1\4\26\0\3\4\4\0\7\4\5\0\1\224"+
    "\25\4\1\0\1\4\26\0\3\4\4\0\7\4\5\0"+
    "\13\4\1\225\12\4\1\0\1\4\26\0\3\4\4\0"+
    "\7\4\5\0\1\226\25\4\1\0\1\4\26\0\3\4"+
    "\4\0\7\4\5\0\5\4\1\227\20\4\1\0\1\4"+
    "\26\0\3\4\4\0\7\4\5\0\14\4\1\230\11\4"+
    "\1\0\1\4\26\0\3\4\4\0\7\4\5\0\12\4"+
    "\1\231\12\4\1\232\1\0\1\4\26\0\3\4\4\0"+
    "\7\4\5\0\3\4\1\233\1\4\1\234\20\4\1\0"+
    "\1\4\26\0\3\4\4\0\7\4\5\0\15\4\1\235"+
    "\10\4\1\0\1\4\26\0\3\4\4\0\7\4\5\0"+
    "\3\4\1\236\22\4\1\0\1\4\26\0\3\4\4\0"+
    "\7\4\5\0\16\4\1\237\7\4\1\0\1\4\26\0"+
    "\3\4\4\0\7\4\5\0\4\4\1\240\21\4\1\0"+
    "\1\4\26\0\3\4\4\0\7\4\5\0\14\4\1\241"+
    "\4\4\1\242\4\4\1\0\1\4\26\0\3\4\4\0"+
    "\7\4\5\0\6\4\1\243\17\4\1\0\1\4\26\0"+
    "\3\4\4\0\7\4\5\0\1\244\25\4\1\0\1\4"+
    "\26\0\3\4\4\0\7\4\5\0\1\4\1\245\24\4"+
    "\1\0\1\4\26\0\3\4\4\0\7\4\5\0\3\4"+
    "\1\246\22\4\1\0\1\4\26\0\3\4\4\0\7\4"+
    "\5\0\6\4\1\247\17\4\1\0\1\4\26\0\3\4"+
    "\4\0\7\4\5\0\5\4\1\250\20\4\1\0\1\4"+
    "\113\0\1\251\100\0\1\252\36\0\1\253\4\0\1\254"+
    "\5\0\1\255\76\0\1\256\46\0\1\166\5\0\3\166"+
    "\117\0\1\257\11\0\1\260\1\261\62\0\1\262\6\0"+
    "\1\263\67\0\1\264\100\0\1\265\100\0\1\266\102\0"+
    "\1\267\2\0\1\270\77\0\1\271\113\0\1\272\61\0"+
    "\1\273\100\0\1\274\100\0\1\275\4\0\1\276\100\0"+
    "\1\277\45\0\7\204\1\300\71\204\6\301\1\302\1\205"+
    "\71\301\2\0\3\4\4\0\7\4\5\0\13\4\1\303"+
    "\12\4\1\0\1\4\26\0\3\4\4\0\7\4\5\0"+
    "\1\4\1\304\24\4\1\0\1\4\26\0\3\4\4\0"+
    "\7\4\5\0\22\4\1\305\3\4\1\0\1\4\26\0"+
    "\3\4\4\0\7\4\5\0\1\4\1\306\24\4\1\0"+
    "\1\4\26\0\3\4\4\0\7\4\5\0\13\4\1\307"+
    "\12\4\1\0\1\4\26\0\3\4\4\0\7\4\5\0"+
    "\3\4\1\310\22\4\1\0\1\4\26\0\3\4\4\0"+
    "\7\4\5\0\1\4\1\311\24\4\1\0\1\4\26\0"+
    "\3\4\4\0\7\4\5\0\13\4\1\312\4\4\1\313"+
    "\5\4\1\0\1\4\26\0\3\4\4\0\7\4\5\0"+
    "\6\4\1\314\17\4\1\0\1\4\26\0\3\4\4\0"+
    "\7\4\5\0\12\4\1\315\13\4\1\0\1\4\26\0"+
    "\3\4\4\0\7\4\5\0\6\4\1\316\17\4\1\0"+
    "\1\4\26\0\3\4\4\0\7\4\5\0\6\4\1\317"+
    "\17\4\1\0\1\4\26\0\3\4\4\0\7\4\5\0"+
    "\21\4\1\320\4\4\1\0\1\4\26\0\3\4\4\0"+
    "\7\4\5\0\16\4\1\321\7\4\1\0\1\4\26\0"+
    "\3\4\4\0\7\4\5\0\25\4\1\322\1\0\1\4"+
    "\26\0\3\4\4\0\7\4\5\0\1\4\1\323\24\4"+
    "\1\0\1\4\26\0\3\4\4\0\7\4\5\0\21\4"+
    "\1\324\4\4\1\0\1\4\26\0\3\4\4\0\7\4"+
    "\5\0\20\4\1\325\5\4\1\0\1\4\26\0\3\4"+
    "\4\0\7\4\5\0\1\4\1\326\24\4\1\0\1\4"+
    "\26\0\3\4\4\0\7\4\5\0\24\4\1\327\1\4"+
    "\1\0\1\4\26\0\3\4\4\0\7\4\5\0\7\4"+
    "\1\330\16\4\1\0\1\4\26\0\3\4\4\0\7\4"+
    "\5\0\13\4\1\331\12\4\1\0\1\4\26\0\3\4"+
    "\4\0\7\4\5\0\16\4\1\332\7\4\1\0\1\4"+
    "\26\0\3\4\4\0\7\4\5\0\1\4\1\333\12\4"+
    "\1\334\11\4\1\0\1\4\26\0\3\4\4\0\7\4"+
    "\5\0\21\4\1\335\4\4\1\0\1\4\26\0\3\4"+
    "\4\0\7\4\5\0\14\4\1\336\11\4\1\0\1\4"+
    "\26\0\3\4\4\0\7\4\5\0\5\4\1\337\20\4"+
    "\1\0\1\4\26\0\3\4\4\0\7\4\5\0\14\4"+
    "\1\340\11\4\1\0\1\4\26\0\3\4\4\0\7\4"+
    "\5\0\14\4\1\341\11\4\1\0\1\4\61\0\1\342"+
    "\75\0\1\343\114\0\1\344\73\0\1\345\74\0\1\346"+
    "\70\0\1\347\13\0\1\350\67\0\1\351\124\0\1\352"+
    "\52\0\1\353\103\0\1\354\74\0\1\355\107\0\1\356"+
    "\111\0\1\357\65\0\1\360\107\0\1\361\100\0\1\362"+
    "\100\0\1\363\102\0\1\364\100\0\1\365\35\0\6\204"+
    "\1\366\1\300\71\204\7\301\1\367\71\301\2\0\3\4"+
    "\4\0\7\4\5\0\1\370\4\4\1\371\20\4\1\0"+
    "\1\4\26\0\3\4\4\0\7\4\5\0\1\4\1\372"+
    "\24\4\1\0\1\4\26\0\3\4\4\0\7\4\5\0"+
    "\1\373\25\4\1\0\1\4\26\0\3\4\4\0\7\4"+
    "\5\0\5\4\1\374\20\4\1\0\1\4\26\0\3\4"+
    "\4\0\7\4\5\0\1\4\1\375\24\4\1\0\1\4"+
    "\26\0\3\4\4\0\7\4\5\0\5\4\1\376\20\4"+
    "\1\0\1\4\26\0\3\4\4\0\7\4\5\0\7\4"+
    "\1\377\16\4\1\0\1\4\26\0\3\4\4\0\7\4"+
    "\5\0\5\4\1\u0100\20\4\1\0\1\4\26\0\3\4"+
    "\4\0\7\4\5\0\12\4\1\u0101\13\4\1\0\1\4"+
    "\26\0\3\4\4\0\7\4\5\0\22\4\1\u0102\3\4"+
    "\1\0\1\4\26\0\3\4\4\0\7\4\5\0\1\4"+
    "\1\u0103\24\4\1\0\1\4\26\0\3\4\4\0\7\4"+
    "\5\0\14\4\1\u0104\11\4\1\0\1\4\26\0\3\4"+
    "\4\0\7\4\5\0\15\4\1\u0105\10\4\1\0\1\4"+
    "\26\0\3\4\4\0\7\4\5\0\2\4\1\u0106\23\4"+
    "\1\0\1\4\26\0\3\4\4\0\7\4\5\0\10\4"+
    "\1\u0107\15\4\1\0\1\4\26\0\3\4\4\0\7\4"+
    "\5\0\6\4\1\u0108\17\4\1\0\1\4\26\0\3\4"+
    "\4\0\7\4\5\0\6\4\1\u0109\17\4\1\0\1\4"+
    "\26\0\3\4\4\0\7\4\5\0\3\4\1\u010a\22\4"+
    "\1\0\1\4\26\0\3\4\4\0\7\4\5\0\23\4"+
    "\1\u010b\2\4\1\0\1\4\26\0\3\4\4\0\7\4"+
    "\5\0\21\4\1\u010c\4\4\1\0\1\4\26\0\3\4"+
    "\4\0\7\4\5\0\3\4\1\u010d\22\4\1\0\1\4"+
    "\26\0\3\4\4\0\7\4\5\0\5\4\1\u010e\20\4"+
    "\1\0\1\4\26\0\3\4\4\0\7\4\5\0\16\4"+
    "\1\u010f\7\4\1\0\1\4\26\0\3\4\4\0\7\4"+
    "\5\0\3\4\1\u0110\22\4\1\0\1\4\71\0\1\u0111"+
    "\61\0\1\u0112\102\0\1\u0113\76\0\1\u0114\107\0\1\u0115"+
    "\112\0\1\u0116\71\0\1\u0117\77\0\1\u0118\103\0\1\u0119"+
    "\75\0\1\u011a\74\0\1\u011b\73\0\1\u011c\113\0\1\u011d"+
    "\65\0\1\u011e\113\0\1\u011f\100\0\1\u0120\72\0\1\u0121"+
    "\77\0\1\u0122\102\0\1\u0123\44\0\6\301\1\302\1\367"+
    "\71\301\2\0\3\4\4\0\7\4\5\0\10\4\1\u0124"+
    "\15\4\1\0\1\4\26\0\3\4\4\0\7\4\5\0"+
    "\1\u0125\25\4\1\0\1\4\26\0\3\4\4\0\7\4"+
    "\5\0\1\4\1\u0126\24\4\1\0\1\4\26\0\3\4"+
    "\4\0\7\4\5\0\11\4\1\u0127\14\4\1\0\1\4"+
    "\26\0\3\4\4\0\7\4\5\0\22\4\1\u0128\3\4"+
    "\1\0\1\4\26\0\3\4\4\0\7\4\5\0\14\4"+
    "\1\u0129\11\4\1\0\1\4\26\0\3\4\4\0\7\4"+
    "\5\0\1\u012a\25\4\1\0\1\4\26\0\3\4\4\0"+
    "\7\4\5\0\13\4\1\u012b\12\4\1\0\1\4\26\0"+
    "\3\4\4\0\7\4\5\0\3\4\1\u012c\22\4\1\0"+
    "\1\4\26\0\3\4\4\0\7\4\5\0\3\4\1\u012d"+
    "\22\4\1\0\1\4\26\0\3\4\4\0\7\4\5\0"+
    "\1\4\1\u012e\24\4\1\0\1\4\26\0\3\4\4\0"+
    "\7\4\5\0\1\4\1\u012f\24\4\1\0\1\4\26\0"+
    "\3\4\4\0\7\4\5\0\14\4\1\u0130\11\4\1\0"+
    "\1\4\26\0\3\4\4\0\7\4\5\0\17\4\1\u0131"+
    "\6\4\1\0\1\4\26\0\3\4\4\0\7\4\5\0"+
    "\16\4\1\u0132\7\4\1\0\1\4\26\0\3\4\4\0"+
    "\7\4\5\0\1\u0133\25\4\1\0\1\4\26\0\3\4"+
    "\4\0\7\4\5\0\3\4\1\u0134\22\4\1\0\1\4"+
    "\26\0\3\4\4\0\7\4\5\0\23\4\1\u0135\2\4"+
    "\1\0\1\4\26\0\3\4\4\0\7\4\5\0\16\4"+
    "\1\u0136\7\4\1\0\1\4\56\0\1\u0137\76\0\1\u0138"+
    "\121\0\1\u0139\60\0\1\u013a\102\0\1\u013b\102\0\1\u013c"+
    "\73\0\1\u013d\114\0\1\u013e\74\0\1\u013f\57\0\1\u0140"+
    "\107\0\1\u0141\55\0\1\u0142\123\0\1\u0143\100\0\1\u0144"+
    "\117\0\1\u0145\35\0\3\4\4\0\7\4\5\0\21\4"+
    "\1\u0146\4\4\1\0\1\4\26\0\3\4\4\0\7\4"+
    "\5\0\6\4\1\u0147\17\4\1\0\1\4\26\0\3\4"+
    "\4\0\7\4\5\0\1\4\1\u0148\24\4\1\0\1\4"+
    "\26\0\3\4\4\0\7\4\5\0\14\4\1\u0149\11\4"+
    "\1\0\1\4\26\0\3\4\4\0\7\4\5\0\16\4"+
    "\1\u014a\7\4\1\0\1\4\26\0\3\4\4\0\7\4"+
    "\5\0\20\4\1\u014b\5\4\1\0\1\4\26\0\3\4"+
    "\4\0\7\4\5\0\10\4\1\u014c\15\4\1\0\1\4"+
    "\26\0\3\4\4\0\7\4\5\0\11\4\1\u014d\14\4"+
    "\1\0\1\4\26\0\3\4\4\0\7\4\5\0\1\4"+
    "\1\u014e\24\4\1\0\1\4\26\0\3\4\4\0\7\4"+
    "\5\0\1\4\1\u014f\24\4\1\0\1\4\26\0\3\4"+
    "\4\0\7\4\5\0\12\4\1\u0150\13\4\1\0\1\4"+
    "\26\0\3\4\4\0\7\4\5\0\10\4\1\u0151\15\4"+
    "\1\0\1\4\62\0\1\u0152\70\0\1\u0153\111\0\1\u0154"+
    "\103\0\1\u0155\70\0\1\u0156\73\0\1\u0157\116\0\1\u0158"+
    "\70\0\1\u0159\77\0\1\u015a\100\0\1\u015b\50\0\3\4"+
    "\4\0\7\4\5\0\16\4\1\u015c\7\4\1\0\1\4"+
    "\26\0\3\4\4\0\7\4\5\0\1\u015d\25\4\1\0"+
    "\1\4\26\0\3\4\4\0\7\4\5\0\1\u015e\25\4"+
    "\1\0\1\4\26\0\3\4\4\0\7\4\5\0\1\4"+
    "\1\u015f\24\4\1\0\1\4\26\0\3\4\4\0\7\4"+
    "\5\0\1\4\1\u0160\24\4\1\0\1\4\70\0\1\u0161"+
    "\62\0\1\u0162\111\0\1\u0163\102\0\1\u0164\101\0\1\u0165"+
    "\40\0\3\4\4\0\7\4\5\0\1\4\1\u0166\24\4"+
    "\1\0\1\4\26\0\3\4\4\0\7\4\5\0\14\4"+
    "\1\u0167\11\4\1\0\1\4\73\0\1\u0168\57\0\1\u0169"+
    "\102\0\1\u016a\52\0\3\4\4\0\7\4\5\0\21\4"+
    "\1\u016b\4\4\1\0\1\4\61\0\1\u016c\43\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17290];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\33\1\11\11\4\1\2\11\6\1\3\0"+
    "\1\1\1\0\2\1\2\11\1\1\1\0\2\11\1\1"+
    "\1\0\1\11\2\1\1\11\37\1\3\11\1\0\10\11"+
    "\1\1\2\11\2\0\1\1\15\0\3\1\1\11\41\1"+
    "\2\11\3\0\1\11\2\0\1\11\17\0\1\1\1\11"+
    "\37\1\1\11\23\0\1\11\1\0\31\1\1\0\1\1"+
    "\2\0\1\11\3\0\1\11\7\0\1\11\1\0\1\11"+
    "\23\1\1\11\4\0\1\11\1\0\2\11\5\0\1\11"+
    "\14\1\2\11\1\0\1\11\4\0\2\11\5\1\2\11"+
    "\3\0\2\1\1\11\1\0\1\11\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[364];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  public _HaxeLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _HaxeLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1320) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 110: 
          { return KSETTER;
          }
        case 121: break;
        case 41: 
          { return KIF ;
          }
        case 122: break;
        case 20: 
          { return OMINUS;
          }
        case 123: break;
        case 24: 
          { return OCOMPLEMENT;
          }
        case 124: break;
        case 92: 
          { return KSWITCH ;
          }
        case 125: break;
        case 33: 
          { return MML_COMMENT;
          }
        case 126: break;
        case 27: 
          { return OBIT_AND;
          }
        case 127: break;
        case 25: 
          { return OQUEST;
          }
        case 128: break;
        case 10: 
          { return LITSTRING;
          }
        case 129: break;
        case 4: 
          { return OQUOTIENT;
          }
        case 130: break;
        case 113: 
          { return KOVERRIDE;
          }
        case 131: break;
        case 74: 
          { return( KCAST );
          }
        case 132: break;
        case 120: 
          { return KPROTECTED;
          }
        case 133: break;
        case 50: 
          { return OCOND_OR;
          }
        case 134: break;
        case 79: 
          { return KTHROW ;
          }
        case 135: break;
        case 71: 
          { return KTRUE ;
          }
        case 136: break;
        case 3: 
          { return ID;
          }
        case 137: break;
        case 109: 
          { return KGETTER;
          }
        case 138: break;
        case 49: 
          { return OBIT_OR_ASSIGN;
          }
        case 139: break;
        case 34: 
          { return OQUOTIENT_ASSIGN;
          }
        case 140: break;
        case 54: 
          { return OSHIFT_LEFT;
          }
        case 141: break;
        case 89: 
          { return KIMPORT ;
          }
        case 142: break;
        case 68: 
          { return KNULL ;
          }
        case 143: break;
        case 99: 
          { return( KEXTENDS );
          }
        case 144: break;
        case 69: 
          { return( KENUM );
          }
        case 145: break;
        case 15: 
          { return PRBRACK;
          }
        case 146: break;
        case 44: 
          { return OARROW;
          }
        case 147: break;
        case 1: 
          { yybegin(YYINITIAL); return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 148: break;
        case 14: 
          { return PLBRACK;
          }
        case 149: break;
        case 80: 
          { return KCATCH;
          }
        case 150: break;
        case 88: 
          { return KINLINE;
          }
        case 151: break;
        case 118: 
          { return KCOREAPI;
          }
        case 152: break;
        case 105: 
          { return( KPACKAGE );
          }
        case 153: break;
        case 93: 
          { return KSTATIC;
          }
        case 154: break;
        case 72: 
          { return KTHIS ;
          }
        case 155: break;
        case 119: 
          { return( KIMPLEMENTS );
          }
        case 156: break;
        case 86: 
          { return KHACK;
          }
        case 157: break;
        case 2: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 158: break;
        case 31: 
          { return MACRO_ID;
          }
        case 159: break;
        case 116: 
          { return( KINTERFACE );
          }
        case 160: break;
        case 38: 
          { return OPLUS_ASSIGN;
          }
        case 161: break;
        case 29: 
          { return OBIT_XOR;
          }
        case 162: break;
        case 37: 
          { return OPLUS_PLUS;
          }
        case 163: break;
        case 114: 
          { return KNODEBUG;
          }
        case 164: break;
        case 87: 
          { return KEXTERN;
          }
        case 165: break;
        case 56: 
          { return OREMAINDER_ASSIGN;
          }
        case 166: break;
        case 78: 
          { return KFALSE ;
          }
        case 167: break;
        case 95: 
          { return KBUILD;
          }
        case 168: break;
        case 36: 
          { return LITOCT;
          }
        case 169: break;
        case 11: 
          { return OCOLON;
          }
        case 170: break;
        case 65: 
          { return OSHIFT_LEFT_ASSIGN;
          }
        case 171: break;
        case 82: 
          { return PPELSE;
          }
        case 172: break;
        case 53: 
          { return OLESS_OR_EQUAL;
          }
        case 173: break;
        case 32: 
          { return MSL_COMMENT;
          }
        case 174: break;
        case 63: 
          { return KVAR;
          }
        case 175: break;
        case 83: 
          { return KBIND;
          }
        case 176: break;
        case 8: 
          { return ODOT;
          }
        case 177: break;
        case 45: 
          { return OMINUS_ASSIGN;
          }
        case 178: break;
        case 97: 
          { return KFINAL;
          }
        case 179: break;
        case 75: 
          { return PPEND;
          }
        case 180: break;
        case 28: 
          { return OLESS;
          }
        case 181: break;
        case 58: 
          { return LITHEX;
          }
        case 182: break;
        case 39: 
          { return LITFLOAT;
          }
        case 183: break;
        case 90: 
          { return KRETURN ;
          }
        case 184: break;
        case 17: 
          { return PRPAREN;
          }
        case 185: break;
        case 60: 
          { return ONEW;
          }
        case 186: break;
        case 43: 
          { return OMINUS_MINUS;
          }
        case 187: break;
        case 16: 
          { return PLPAREN;
          }
        case 188: break;
        case 91: 
          { return KPUBLIC;
          }
        case 189: break;
        case 85: 
          { return KMETA;
          }
        case 190: break;
        case 61: 
          { return KFOR ;
          }
        case 191: break;
        case 26: 
          { return OBIT_OR;
          }
        case 192: break;
        case 107: 
          { return KNATIVE;
          }
        case 193: break;
        case 101: 
          { return KDYNAMIC;
          }
        case 194: break;
        case 100: 
          { return( KDEFAULT );
          }
        case 195: break;
        case 21: 
          { return OGREATER;
          }
        case 196: break;
        case 19: 
          { return OCOMMA;
          }
        case 197: break;
        case 111: 
          { return( KFUNCTION );
          }
        case 198: break;
        case 9: 
          { return LITCHAR;
          }
        case 199: break;
        case 47: 
          { return OEQ;
          }
        case 200: break;
        case 42: 
          { return KDO ;
          }
        case 201: break;
        case 115: 
          { return KREQUIRE;
          }
        case 202: break;
        case 104: 
          { return KPRIVATE;
          }
        case 203: break;
        case 64: 
          { return OSHIFT_RIGHT_ASSIGN;
          }
        case 204: break;
        case 23: 
          { return ONOT;
          }
        case 205: break;
        case 13: 
          { return PRCURLY;
          }
        case 206: break;
        case 62: 
          { return KTRY;
          }
        case 207: break;
        case 106: 
          { return PPELSEIF;
          }
        case 208: break;
        case 73: 
          { return( KCASE );
          }
        case 209: break;
        case 12: 
          { return PLCURLY;
          }
        case 210: break;
        case 81: 
          { return( KCLASS );
          }
        case 211: break;
        case 98: 
          { return KMACRO;
          }
        case 212: break;
        case 96: 
          { return KDEBUG;
          }
        case 213: break;
        case 22: 
          { return OASSIGN;
          }
        case 214: break;
        case 46: 
          { return OGREATER_OR_EQUAL;
          }
        case 215: break;
        case 5: 
          { return OMUL;
          }
        case 216: break;
        case 52: 
          { return OCOND_AND;
          }
        case 217: break;
        case 48: 
          { return ONOT_EQ;
          }
        case 218: break;
        case 117: 
          { return KFAKEENUM;
          }
        case 219: break;
        case 76: 
          { return KWHILE ;
          }
        case 220: break;
        case 51: 
          { return OBIT_AND_ASSIGN;
          }
        case 221: break;
        case 7: 
          { return OPLUS;
          }
        case 222: break;
        case 70: 
          { return KELSE ;
          }
        case 223: break;
        case 6: 
          { return LITINT;
          }
        case 224: break;
        case 57: 
          { return DOC_COMMENT;
          }
        case 225: break;
        case 112: 
          { return KCONTINUE ;
          }
        case 226: break;
        case 67: 
          { return KNS;
          }
        case 227: break;
        case 108: 
          { return KBITMAP;
          }
        case 228: break;
        case 102: 
          { return KUNTYPED;
          }
        case 229: break;
        case 84: 
          { return KKEEP;
          }
        case 230: break;
        case 77: 
          { return( KBREAK );
          }
        case 231: break;
        case 18: 
          { return OSEMI;
          }
        case 232: break;
        case 30: 
          { return OREMAINDER;
          }
        case 233: break;
        case 35: 
          { return OMUL_ASSIGN;
          }
        case 234: break;
        case 40: 
          { return OIN;
          }
        case 235: break;
        case 103: 
          { return KTYPEDEF;
          }
        case 236: break;
        case 94: 
          { return PPERROR;
          }
        case 237: break;
        case 55: 
          { return OBIT_XOR_ASSIGN;
          }
        case 238: break;
        case 59: 
          { return OTRIPLE_DOT;
          }
        case 239: break;
        case 66: 
          { return PPIF;
          }
        case 240: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
